{"version":3,"sources":["modules/conf/config.js","modules/common/constants/MapConstants.js","stores/MapState.store.js","modules/common/components/Map/Map.jsx","modules/common/components/countStrip/counterStrip.js","modules/services/common.js","modules/landing/components/RegionMap.jsx","modules/landing/container/Landing.jsx","modules/drawer/components/DrawerMenu.jsx","modules/drawer/container/Drawer.jsx","modules/headerNav/HeaderNav.js","modules/about/about.js","stores/covidApis.store.js","stores/theme.store.js","stores/utils.store.js","stores/DrawerStore.js","i18n.js","contexts/Context.jsx","App.js","serviceWorker.js","index.js"],"names":["AppConfig","geoMap","name","key","mapMeta","India","geoDataFile","mapType","graphObjectName","Assam","Bihar","Chhattisgarh","Delhi","Karnataka","Kerala","Goa","Gujarat","Haryana","Jharkhand","Ladakh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","MapState","view","district","this","geoRegion","observable","action","regionData","regionName","push","computed","Map","mapData","geoData","height","width","colorScale","onRegionClick","keyToPickFromGeoData","svgRef","useRef","useEffect","svg","select","current","projection","geoMercator","fitExtent","pathGenerator","geoPath","selectAll","data","features","join","attr","feature","properties","find","region","confirmed","parseInt","on","d","target","event","className","id","viewBox","preserveAspectRatio","ref","CounterStrip","React","memo","backNavigator","onClickHandler","t","useTranslation","classNames","onClick","size","fontSize","map","item","value","oldProps","newProps","_","isEqual","getStatObject","memoizeOne","recovered","active","deaths","getGeoJSON","viewObject","objects","topojson","toJS","oldProp","newProp","isCountryView","getGeoColorScale","length","minProp","min","state","maxProp","max","scaleLinear","domain","range","RegionMap","observer","stateWiseCount","districtWiseCount","indiaCount","useStore","mapState","setStateView","setDistrictView","setCountryView","coronaTraker","getTopoDataForRegion","corData","displayName","correctedHeight","correctedWidth","style","Landing","getStateWiseCount","getDistrictWiseCount","slice","useStyles","makeStyles","list","backgroundColor","paddingTop","MenuList","classes","toggleDrawer","drawerState","clsx","role","onKeyDown","List","text","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","SwipeableTemporaryDrawer","open","Fragment","SwipeableDrawer","anchor","onClose","onOpen","HeaderNav","setLanguage","utilStore","useState","lang","handleChangelLang","AppBar","position","Toolbar","root","IconButton","edge","color","aria-label","display","justifyContent","flex","Typography","variant","to","Select","labelId","onChange","e","changeLang","disableUnderline","MenuItem","About","CoronaTracker","a","axios","get","statewise","statecode","processedData","secKey","sectionData","districtData","ThemeStore","newTheme","theme","UtilsStore","i18Ref","newLanguage","language","changeLanguage","DrawerState","type","i18n","use","XHR","LanguageDetector","init","debug","lng","fallbackLng","keySeparator","interpolation","escapeValue","resources","en","translations","translationEng","hin","translationHin","mar","translationMar","ns","defaultNS","storesContext","createContext","StoreProvider","children","store","useLocalStore","themeStore","Provider","useContext","Error","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7064037c.chunk.js","sourcesContent":["export const AppConfig = {\n    apiBaseUrl: 'https://api.covid19india.org',\n    baseTopo: 'https://www.covid19india.org/maps'\n}","import { AppConfig } from '../../conf'\n\nexport const STRIPHEIGHT = 65;\nexport const MAPCONTAINERPADDING = 40\n\nexport const geoMap = {\n    'country': {\n        name: 'India',\n        key: 'st_nm'\n    },\n    'state': {\n        name: 'state',\n        key: 'district'\n    }\n}\n\n\nexport const mapMeta = {\n    India: {\n        name: 'India',\n        geoDataFile: `${AppConfig.baseTopo}/india.json`,\n        mapType: 'country',\n        graphObjectName: 'india',\n    },\n    'Andaman and Nicobar Islands': {\n        name: 'Andaman and Nicobar Islands',\n        geoDataFile: `${AppConfig.baseTopo}/andamannicobarislands.json`,\n        mapType: 'state',\n        graphObjectName: 'andamannicobarislands_district',\n    },\n    'Arunachal Pradesh': {\n        name: 'Arunachal Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/arunachalpradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'arunachalpradesh_district',\n    },\n    'Andhra Pradesh': {\n        name: 'Andhra Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/andhrapradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'andhrapradesh_district',\n    },\n    Assam: {\n        name: 'Assam',\n        geoDataFile: `${AppConfig.baseTopo}/assam.json`,\n        mapType: 'state',\n        graphObjectName: 'assam_district',\n    },\n    Bihar: {\n        name: 'Bihar',\n        geoDataFile: `${AppConfig.baseTopo}/bihar.json`,\n        mapType: 'state',\n        graphObjectName: 'bihar_district',\n    },\n    Chhattisgarh: {\n        name: 'Chhattisgarh',\n        geoDataFile: `${AppConfig.baseTopo}/chhattisgarh.json`,\n        mapType: 'state',\n        graphObjectName: 'chhattisgarh_district',\n    },\n    Delhi: {\n        name: 'Delhi',\n        geoDataFile: `${AppConfig.baseTopo}/delhi.json`,\n        mapType: 'state',\n        graphObjectName: 'delhi_district',\n    },\n    Karnataka: {\n        name: 'Karnataka',\n        geoDataFile: `${AppConfig.baseTopo}/karnataka.json`,\n        mapType: 'state',\n        graphObjectName: 'karnataka_district',\n    },\n    Kerala: {\n        name: 'Kerala',\n        geoDataFile: `${AppConfig.baseTopo}/kerala.json`,\n        mapType: 'state',\n        graphObjectName: 'kerala_district',\n    },\n    Goa: {\n        name: 'Goa',\n        geoDataFile: `${AppConfig.baseTopo}/goa.json`,\n        mapType: 'state',\n        graphObjectName: 'goa_district',\n    },\n    Gujarat: {\n        name: 'Gujarat',\n        geoDataFile: `${AppConfig.baseTopo}/gujarat.json`,\n        mapType: 'state',\n        graphObjectName: 'gujarat_district',\n    },\n    Haryana: {\n        name: 'Haryana',\n        geoDataFile: `${AppConfig.baseTopo}/haryana.json`,\n        mapType: 'state',\n        graphObjectName: 'haryana_district',\n    },\n    'Himachal Pradesh': {\n        name: 'Himachal Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/himachalpradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'himachalpradesh_district',\n    },\n    'Jammu and Kashmir': {\n        name: 'Jammu and Kashmir',\n        geoDataFile: `${AppConfig.baseTopo}/jammukashmir.json`,\n        mapType: 'state',\n        graphObjectName: 'jammukashmir_district',\n    },\n    Jharkhand: {\n        name: 'Jharkhand',\n        geoDataFile: `${AppConfig.baseTopo}/jharkhand.json`,\n        mapType: 'state',\n        graphObjectName: 'jharkhand_district',\n    },\n    Ladakh: {\n        name: 'Ladakh',\n        geoDataFile: `${AppConfig.baseTopo}/ladakh.json`,\n        mapType: 'state',\n        graphObjectName: 'ladakh_district',\n    },\n    'Madhya Pradesh': {\n        name: 'Madhya Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/madhyapradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'madhyapradesh_district',\n    },\n    Maharashtra: {\n        name: 'Maharashtra',\n        geoDataFile: `${AppConfig.baseTopo}/maharashtra.json`,\n        mapType: 'state',\n        graphObjectName: 'maharashtra_district',\n    },\n    Manipur: {\n        name: 'Manipur',\n        geoDataFile: `${AppConfig.baseTopo}/manipur.json`,\n        mapType: 'state',\n        graphObjectName: 'manipur_pre2016_districts',\n    },\n    Meghalaya: {\n        name: 'Meghalaya',\n        geoDataFile: `${AppConfig.baseTopo}/meghalaya.json`,\n        mapType: 'state',\n        graphObjectName: 'meghalaya_district',\n    },\n    Mizoram: {\n        name: 'Mizoram',\n        geoDataFile: `${AppConfig.baseTopo}/mizoram.json`,\n        mapType: 'state',\n        graphObjectName: 'mizoram_district',\n    },\n    Nagaland: {\n        name: 'Nagaland',\n        geoDataFile: `${AppConfig.baseTopo}/nagaland.json`,\n        mapType: 'state',\n        graphObjectName: 'nagaland_district',\n    },\n    Odisha: {\n        name: 'Odisha',\n        geoDataFile: `${AppConfig.baseTopo}/odisha.json`,\n        mapType: 'state',\n        graphObjectName: 'odisha_district',\n    },\n    Punjab: {\n        name: 'Punjab',\n        geoDataFile: `${AppConfig.baseTopo}/punjab.json`,\n        mapType: 'state',\n        graphObjectName: 'punjab_district',\n    },\n    Rajasthan: {\n        name: 'Rajasthan',\n        geoDataFile: `${AppConfig.baseTopo}/rajasthan.json`,\n        mapType: 'state',\n        graphObjectName: 'rajasthan_district',\n    },\n    Sikkim: {\n        name: 'Sikkim',\n        geoDataFile: `${AppConfig.baseTopo}/sikkim.json`,\n        mapType: 'state',\n        graphObjectName: 'sikkim_district',\n    },\n    'Tamil Nadu': {\n        name: 'Tamil Nadu',\n        geoDataFile: `${AppConfig.baseTopo}/tamil-nadu.json`,\n        mapType: 'state',\n        graphObjectName: 'tamilnadu_district',\n    },\n    Telangana: {\n        name: 'Telangana',\n        geoDataFile: `${AppConfig.baseTopo}/telugana.json`,\n        mapType: 'state',\n        graphObjectName: 'telugana',\n    },\n    Tripura: {\n        name: 'Tripura',\n        geoDataFile: `${AppConfig.baseTopo}/tripura.json`,\n        mapType: 'state',\n        graphObjectName: 'tripura_district',\n    },\n    Uttarakhand: {\n        name: 'Uttarakhand',\n        geoDataFile: `${AppConfig.baseTopo}/uttarakhand.json`,\n        mapType: 'state',\n        graphObjectName: 'uttarakhand_district',\n    },\n    'Uttar Pradesh': {\n        name: 'Uttar Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/uttarpradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'uttarpradesh_district',\n    },\n\n    'West Bengal': {\n        name: 'West Bengal',\n        geoDataFile: `${AppConfig.baseTopo}/westbengal.json`,\n        mapType: 'state',\n        graphObjectName: 'westbengal_district',\n    },\n};\n\n","import { observable, action, computed } from 'mobx'\nimport { mapMeta } from '../modules/common/constants'\n\nexport class MapState {\n    view = 'country'\n    district = ''\n    @observable geoRegion = 'India'\n    @observable regionData = []\n\n    @action setCountryView = () => {\n        this.view = 'country'\n        this.geoRegion = 'India'\n        this.regionData = []\n    }\n\n    @action setStateView = (regionData, regionName) => {\n        this.view = 'state'\n        this.geoRegion = regionName\n        this.regionData.push(regionData)\n        this.regionData = [...this.regionData]\n    }\n\n    @action setDistrictView = (regionData, regionName) => {\n        this.district = regionName\n        this.regionData[1] = regionData\n        this.regionData = [...this.regionData]\n    }\n\n    @computed get viewObject() {\n        const obj = mapMeta[this.geoRegion]\n        return obj\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { select, geoPath, geoMercator, event } from \"d3\";\nimport \"./Map.css\";\n\nexport const Map = ({\n  mapData,\n  geoData,\n  height,\n  width,\n  colorScale,\n  onRegionClick,\n  keyToPickFromGeoData\n}) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const projection = geoMercator().fitExtent([[0, 0], [width, height]], geoData);\n    const pathGenerator = geoPath().projection(projection);\n\n    svg\n      .selectAll(\".states\")\n      .data(geoData.features)\n      .join(\"path\")\n      .attr(\"class\", \"states\")\n      .attr(\"d\", feature => pathGenerator(feature))\n      .attr(\"fill\", feature => {\n        const regionName = feature.properties[keyToPickFromGeoData];\n        const regionData = mapData\n          ? mapData.find(region => region.name === regionName)\n          : [];\n        return regionData && regionData.confirmed\n          ? colorScale(parseInt(regionData.confirmed, 10))\n          : \"rgb(255,250,250)\";\n      })\n      .on(\"click\", feature => {\n        if (!onRegionClick) return;\n        const regionName = feature.properties[keyToPickFromGeoData];\n        const regionData = mapData\n        ? mapData.find(region => region.name === regionName)\n        : [];\n        onRegionClick(regionData, regionName);\n      })\n      .on(\"mouseover\", d => {\n        const target = event.target;\n        select(target).attr(\"class\", \"map-hover\");\n      })\n      .on(\"mouseleave\", d => {\n        const target = event.target;\n        select(target).attr(\"class\", \"states\");\n      });\n  }, [\n    geoData,\n    mapData,\n    colorScale,\n    height,\n    width,\n    keyToPickFromGeoData,\n    onRegionClick\n  ]);\n\n  return (\n    <div className=\"map-container\">\n      <svg\n        id=\"chart\"\n        width={width}\n        height={height}\n        viewBox={`0 0 ${width} ${height}`}\n        preserveAspectRatio=\"xMidYMid meet\"\n        ref={svgRef}\n      ></svg>\n    </div>\n  );\n};\n","import React from 'react';\nimport './counterStrip.css'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next'\nimport classNames from 'classnames'\n\nexport const CounterStrip = React.memo(({\n    regionName,\n    backNavigator,\n    data,\n    onClickHandler\n}) => {\n    const { t } = useTranslation()\n    \n    return (\n        <div className={classNames({ 'count-strip-container': true, 'nav-strip': backNavigator })}>\n            <div className='item name-container' onClick={onClickHandler ? onClickHandler : null}>\n                <span className=\"name\">\n                    {backNavigator && <ArrowBackIosIcon className=\"icon\" size={10} fontSize=\"small\"></ArrowBackIosIcon>}\n                    {t(regionName)}\n                </span>\n            </div>\n            <div className='item count'>\n                {\n                    data && data.map(item => {\n                        return (\n                            <div key={`regionName-${item.name}`} className={`count-item ${item.name}`}>\n                                <div>{t(item.name)}</div>\n                                <div className=\"count-val\">{item && item.value ? item.value : 0}</div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    );\n}, (oldProps, newProps) => {\n    return (\n        oldProps.regionName === newProps.regionName\n        && _.isEqual(oldProps, newProps)\n    )\n})\n","import memoizeOne from \"memoize-one\"\nimport _ from 'lodash';\n\nexport const getStatObject = memoizeOne((data) => {\n    // console.log(data)\n    return [\n        {\n            name: \"confirmed\",\n            value: data?.confirmed ?? 0\n        },\n        {\n            name: \"recovered\",\n            value: data?.recovered ?? 0\n        },\n        {\n            name: \"active\",\n            value: data?.active ?? 0\n        },\n        {\n            name: \"died\",\n            value: data?.deaths ?? 0\n        }]\n}, (oldProps, newProps) => {\n    return (_.isEqual(oldProps[0], newProps[0]))\n})","import React from \"react\";\nimport { useStore } from \"../../../contexts\";\nimport { Map, CounterStrip } from \"../../common\";\nimport { geoMap, STRIPHEIGHT, MAPCONTAINERPADDING } from \"../../common/constants\";\nimport { min, max, scaleLinear } from \"d3\";\nimport { useEffect } from \"react\";\nimport { toJS } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport * as topojson from \"topojson-client\";\nimport memoizeOne from \"memoize-one\";\nimport { AutoSizer } from \"react-virtualized\";\nimport { getStatObject } from \"../../services\";\nimport { useTranslation } from 'react-i18next'\nimport \"./RegionMap.css\";\n\nconst getGeoJSON = memoizeOne(\n  (geoData, viewObject) => {\n    return geoData && viewObject && geoData.objects[viewObject.graphObjectName]\n      ? topojson.feature(\n          geoData,\n          toJS(geoData.objects[viewObject.graphObjectName])\n        )\n      : null;\n  },\n  (oldProp, newProp) =>\n    oldProp[1].name === newProp[1].name && oldProp[0] === newProp[0]\n);\n\nconst isCountryView = regionName => {\n  return regionName === \"country\";\n};\n\nconst getGeoColorScale = memoizeOne(data => {\n  if (data && data.length) {\n    const minProp = min(data, state => parseInt(state.confirmed, 10));\n    const maxProp = max(data, state => parseInt(state.confirmed, 10));\n    return scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"rgb(255,250,250)\", \"#FF0000\"]);\n  } else {\n    return null;\n  }\n});\n\nexport const RegionMap = observer(\n  ({ stateWiseCount, districtWiseCount, indiaCount }) => {\n    const {\n      mapState: {\n        view,\n        geoRegion,\n        district,\n        viewObject,\n        setStateView,\n        setDistrictView,\n        setCountryView,\n        regionData\n      },\n      coronaTraker: { geoData, getTopoDataForRegion }\n    } = useStore();\n\n    // Effect to fetch topoJSON data\n    useEffect(() => {\n      if (view) {\n        getTopoDataForRegion(viewObject);\n      }\n    }, [view, viewObject, getTopoDataForRegion]);\n    const { t } = useTranslation();\n    // Converting top JSON to GEO json\n    const corData = getGeoJSON(geoData, viewObject);\n    const colorScale = getGeoColorScale(\n      isCountryView(view) ? stateWiseCount : districtWiseCount[geoRegion]\n    );\n\n    return (\n      <>\n        <CounterStrip\n          regionName={t(\"India\")}\n          backNavigator={true}\n          data={getStatObject({\n            active: indiaCount?.active ?? 0,\n            recovered: indiaCount?.recovered ?? 0,\n            confirmed: indiaCount?.confirmed ?? 0,\n            deaths: indiaCount?.deaths ?? 0,\n            region: \"India\"\n          })}\n          onClickHandler={setCountryView}\n        ></CounterStrip>\n        {regionData &&\n          regionData.map(item => {\n            return (\n              <CounterStrip\n                key={item ? item.displayName : district}\n                regionName={item ? item.displayName : district}\n                data={getStatObject({\n                  active: item?.active ?? 0,\n                  recovered: item?.recovered ?? 0,\n                  confirmed: item?.confirmed ?? 0,\n                  deaths: item?.deaths ?? 0,\n                  region: item ? item.displayName : district\n                })}\n              ></CounterStrip>\n            );\n          })}\n        <AutoSizer>\n          {({ height, width }) => {\n            const correctedHeight =\n              height - (STRIPHEIGHT + regionData.length * STRIPHEIGHT + MAPCONTAINERPADDING);\n            const correctedWidth = width - MAPCONTAINERPADDING;\n            return (\n              corData && (\n                <div\n                  className=\"rgn-map-container\"\n                  style={{ width: correctedWidth, height: correctedHeight }}\n                >\n                  <Map\n                    onRegionClick={\n                      isCountryView(view) ? setStateView : setDistrictView\n                    }\n                    colorScale={colorScale}\n                    className={\"r-map\"}\n                    keyToPickFromGeoData={geoMap[view].key}\n                    height={correctedHeight}\n                    width={correctedWidth}\n                    mapData={\n                      isCountryView(view)\n                        ? toJS(stateWiseCount)\n                        : toJS(districtWiseCount[geoRegion])\n                    }\n                    geoData={corData}\n                  ></Map>\n                </div>\n              )\n            );\n          }}\n        </AutoSizer>\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { useStore } from \"../../../contexts\";\nimport { observer } from \"mobx-react\";\nimport { toJS } from \"mobx\";\nimport { RegionMap } from \"../components/RegionMap\";\nimport { useEffect } from \"react\";\nimport \"./Landing.css\";\n\nexport const Landing = observer(() => {\n  const {\n    coronaTraker: {\n      getStateWiseCount,\n      getDistrictWiseCount,\n      stateWiseCount,\n      districtWiseCount\n    }\n  } = useStore();\n\n  useEffect(() => {\n    getStateWiseCount();\n    getDistrictWiseCount();\n  }, [getStateWiseCount, getDistrictWiseCount]);\n\n  return (\n    <div className=\"landingContainer\">\n      <div>\n        <RegionMap\n          indiaCount={stateWiseCount ? toJS(stateWiseCount[0]) : {}}\n          stateWiseCount={\n            stateWiseCount && stateWiseCount.slice(1, stateWiseCount.length)\n          }\n          districtWiseCount={districtWiseCount}\n        ></RegionMap>\n      </div>\n    </div>\n  );\n});\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { useStore } from \"../../../contexts\";\nimport { observer } from \"mobx-react\";\n\nconst useStyles = makeStyles({\n  list: {\n    width: 450,\n    height: '100%',\n    backgroundColor: '#F0F0F0',\n    paddingTop: 10\n  }\n});\n\nexport const MenuList = observer(() => {\n  const classes = useStyles();\n  const {\n    drawerState: { toggleDrawer }\n  } = useStore();\n  return (\n    <div\n      className={clsx(classes.list)}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <List>\n        {[\"Demographics\", \"Spread Plot\", \"Testing\", \"News\"].map(\n          (text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          )\n        )}\n      </List>\n      <Divider />\n      <List>\n        {[\"Data Source\", \"About Us\", \"Join Us\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n});\n","import React from \"react\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport { useStore } from \"../../../contexts\";\nimport { observer } from \"mobx-react\";\nimport { MenuList } from \"../components\";\n\nexport const SwipeableTemporaryDrawer = observer(() => {\n  const {\n    drawerState: { open, toggleDrawer }\n  } = useStore();\n  return (\n    <div>\n      <React.Fragment>\n        <SwipeableDrawer\n          anchor={\"left\"}\n          open={open}\n          onClose={toggleDrawer(false)}\n          onOpen={toggleDrawer(true)}\n        >\n          <MenuList></MenuList>\n        </SwipeableDrawer>\n      </React.Fragment>\n    </div>\n  );\n});\n","import React, {useState} from 'react'\nimport { useStore } from \"../../contexts\";\nimport { observer } from 'mobx-react'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { AppBar, Toolbar, IconButton, Typography, Select, MenuItem } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport './headerNav.css'\n\nexport const HeaderNav = observer(() => {\n  const {\n    drawerState: { toggleDrawer },\n    utilStore:{\n      setLanguage\n    }\n  } = useStore();\n  const [lang, handleChangelLang,] = useState('en')\n  const changeLang = (lang) => {\n    handleChangelLang(lang);\n    setLanguage(lang)\n  }\n\n  return (<div className='root'>\n    <AppBar position=\"static\">\n      <Toolbar classes={{\n        root: 'root'\n      }}>\n        <IconButton edge=\"start\" className='menuButton' color=\"black\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n          <MenuIcon />\n        </IconButton>\n        <div style={{ display: 'flex', justifyContent: 'space-between', flex: 1 }}>\n          <Typography variant=\"h5\">\n            <Link className=\"logo\" to=\"/\">\n              <span className=\"cause\">coronavirus</span>\n              <span className=\"appliation\">chart</span>\n              <span className=\"seperator\">.</span>\n              <span className=\"mode\">live</span>\n            </Link>\n          </Typography>\n          <div className=\"lang\">\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={lang}\n              onChange={e=>changeLang(e.target.value)}\n              disableUnderline\n            >\n              <MenuItem value=\"en\">English</MenuItem>\n              <MenuItem value=\"mar\">मराठी</MenuItem>\n            </Select>\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  </div>)\n})","import React from 'react'\n\nexport const About = () => {\n    return (\n        <div>About</div>\n    )\n}","import axios from 'axios';\nimport { observable, action } from 'mobx'\nimport { AppConfig } from '../modules'\n\nexport class CoronaTracker {\n    @observable stateWiseCount = null\n    @observable districtWiseCount = null\n    @observable geoData = null\n\n    @action getStateWiseCount = async () => {\n        const { data } = await axios.get(`${AppConfig.apiBaseUrl}/data.json`)\n        this.stateWiseCount = data.statewise.map(state => ({\n            ...state,\n            name: state.state,\n            displayName: state.state.length <  10 ? state.state : state.statecode\n        }))\n        // console.log(toJS(this.stateWiseCount))\n    }\n\n    @action getDistrictWiseCount = async () => {\n        const { data } = await axios.get(`${AppConfig.apiBaseUrl}/state_district_wise.json`)\n        const processedData = {}\n        for (let key in data) {\n            const sectionData = data[key] ? data[key].districtData : []\n            processedData[key] = []\n            for (let secKey in sectionData) {\n                processedData[key].push({\n                    name: secKey,\n                    displayName: secKey,\n                    ...sectionData[secKey]\n                })\n            }\n        }\n        this.districtWiseCount = processedData\n        // console.log(toJS(this.districtWiseCount))\n    }\n\n    @action getTopoDataForRegion = async (viewObject) => {\n        const { data } = await axios.get(viewObject.geoDataFile)\n        this.geoData = data\n        // console.log(toJS(this.geoData))\n    }\n}","// src/stores/theme-store.tsx\nimport { observable, action } from 'mobx'\n\nexport class ThemeStore {\n  @observable\n  theme = 'light'\n\n  @action\n  setTheme(newTheme) {\n    this.theme = newTheme\n  }\n}","// src/stores/theme-store.tsx\nimport { observable, action } from 'mobx'\n\nexport class UtilsStore {\n    constructor (i18Ref) {\n        this.i18Ref = i18Ref\n    }\n  @observable language = 'en'\n  @observable i18Ref = null\n\n  @action setI18Context = (i18Ref) =>{\n    this.i18Ref = i18Ref\n  }\n  \n  @action\n  setLanguage = (newLanguage) => {\n    this.language = newLanguage\n    this.i18Ref.changeLanguage(newLanguage)\n  }\n}","import { observable, action } from 'mobx'\n\nexport class DrawerState {\n    @observable open = false\n\n    @action toggleDrawer = (open) => event => {\n        \n        if (\n            event &&\n            event.type === \"keydown\" &&\n            (event.key === \"Tab\" || event.key === \"Shift\")\n        ) {\n            return;\n        }\n        this.open = open\n    }\n}","\nimport i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport XHR from 'i18next-xhr-backend'\nimport translationHin from \"./locales/hin/translation.json\";\nimport translationEng from \"./locales/en/translation.json\";\nimport translationMar from \"./locales/mar/translation.json\";\n\ni18n\n  .use(XHR)\n  .use(LanguageDetector)\n  .init({\n    debug: true,\n    lng: \"en\",\n    fallbackLng: \"en\", // use en if detected lng is not available\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    },\n\n    resources: {\n      en: {\n        translations: translationEng\n      },\n      hin: {\n        translations: translationHin\n      },\n      mar: {\n        translations: translationMar\n      }\n    },\n    // have a common namespace used around the full app\n    ns: [\"translations\"],\n    defaultNS: \"translations\"\n  });\n\nexport default i18n;","import React from \"react\";\nimport { MapState, ThemeStore, CoronaTracker, UtilsStore, DrawerState } from \"../stores\";\nimport i18n from '../i18n'\nimport { useLocalStore } from \"mobx-react\"; // 6.x or mobx-react-lite@1.4.0\nimport { I18nextProvider } from 'react-i18next'\n\nexport const storesContext = React.createContext(null);\n\nexport const StoreProvider = ({ children }) => {\n  const store = useLocalStore(() => ({\n    coronaTraker: new CoronaTracker(),\n    themeStore: new ThemeStore(),\n    mapState: new MapState(),\n    utilStore: new UtilsStore(i18n),\n    drawerState: new DrawerState()\n  }));\n  return (\n    <storesContext.Provider value={store}>\n      <I18nextProvider i18n={i18n}>\n        {children}\n      </I18nextProvider>\n    </storesContext.Provider>\n  );\n};\n\nexport const useStore = () => {\n  const store = React.useContext(storesContext);\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error(\"useStore must be used within a StoreProvider.\");\n  }\n  return store;\n};\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { StoreProvider } from './contexts';\nimport { Landing, HeaderNav, About, SwipeableTemporaryDrawer } from './modules';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StoreProvider>\n        <Router>\n          <header><HeaderNav /></header>\n          <SwipeableTemporaryDrawer></SwipeableTemporaryDrawer>\n          <div className='main-pane'>\n            <Switch>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/\">\n                <Landing />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}