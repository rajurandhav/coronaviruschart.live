{"version":3,"sources":["modules/conf/config.js","modules/common/constants/MapConstants.js","stores/MapState.store.js","modules/common/components/Map/Map.jsx","modules/common/components/countStrip/counterStrip.js","modules/drawer/components/DrawerMenu.jsx","modules/drawer/container/Drawer.jsx","modules/headerNav/HeaderNav.js","modules/services/common.js","modules/services/stats.js","modules/landing/components/RegionMap.jsx","modules/landing/container/Landing.jsx","modules/about/about.js","modules/helplines/components/HelpCard.jsx","modules/helplines/components/HelpSearch.jsx","modules/helplines/container/HelpContainer.jsx","stores/HelpLineState.store.js","stores/covidApis.store.js","stores/theme.store.js","stores/utils.store.js","stores/DrawerStore.js","i18n.js","contexts/Context.jsx","App.js","serviceWorker.js","index.js"],"names":["AppConfig","geoMap","name","key","mapMeta","India","geoDataFile","mapType","graphObjectName","Assam","Bihar","Chhattisgarh","Delhi","Karnataka","Kerala","Goa","Gujarat","Haryana","Jharkhand","Ladakh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","MapState","view","district","this","geoRegion","observable","action","regionData","regionName","push","computed","Map","mapData","geoData","height","width","colorScale","onRegionClick","keyToPickFromGeoData","svgRef","useRef","useEffect","svg","select","current","projection","geoMercator","fitExtent","pathGenerator","geoPath","selectAll","data","features","join","attr","feature","properties","find","region","confirmed","parseInt","on","d","target","event","className","id","viewBox","preserveAspectRatio","ref","viewIcon","component","props","CounterStrip","React","memo","backNavigator","onClickHandler","t","useTranslation","useState","setView","classNames","onClick","map","icon","selected","size","fontSize","item","value","delta","oldProps","newProps","_","isEqual","useStyles","makeStyles","list","backgroundColor","paddingTop","MenuList","observer","classes","toggleDrawer","useStore","drawerState","clsx","role","onKeyDown","List","text","index","to","ListItem","button","ListItemIcon","ListItemText","primary","Divider","SwipeableTemporaryDrawer","open","Fragment","SwipeableDrawer","anchor","onClose","onOpen","HeaderNav","setLanguage","utilStore","lang","handleChangelLang","AppBar","position","Toolbar","root","IconButton","edge","color","aria-label","style","display","justifyContent","flex","Typography","variant","Select","labelId","onChange","e","changeLang","disableUnderline","MenuItem","getStatObject","memoizeOne","deltaconfirmed","recovered","active","deaths","totalHospitals","totalBeds","getProcessedStateStats","stateWiseCount","bedCounts","isEmpty","stateWiseData","statesLength","length","i","selectedStatState","undefined","bedData","state","toJS","getGeoJSON","viewObject","objects","topojson","oldProp","newProp","isCountryView","getGeoColorScale","minProp","min","maxProp","max","scaleLinear","domain","range","RegionMap","districtWiseCount","indiaCount","mapState","setStateView","setDistrictView","setCountryView","coronaTracker","getTopoDataForRegion","corData","displayName","correctedHeight","correctedWidth","Landing","getStateWiseCount","getDistrictWiseCount","getBedCounts","stateWiseCountStat","slice","About","HelpCard","Card","CardContent","nameoftheorganisation","category","phonenumber","descriptionandorserviceprovided","HelpSearch","filters","filter","FormControl","InputLabel","label","onSelect","HelpContainer","helpLine","getHelpLineData","helpLineFilter","selectedData","HelpLine","selectState","disable","selectArea","selectedState","keys","helpLineData","selectedArea","a","axios","get","resources","reduce","result","city","states","Object","CoronaTracker","statewise","processedData","secKey","sectionData","districtData","regional","ThemeStore","newTheme","theme","UtilsStore","i18Ref","newLanguage","language","changeLanguage","DrawerState","type","i18n","use","XHR","LanguageDetector","init","debug","lng","fallbackLng","keySeparator","interpolation","escapeValue","en","translations","translationEng","hin","translationHin","mar","translationMar","ns","defaultNS","storesContext","createContext","StoreProvider","children","store","useLocalStore","themeStore","Provider","useContext","Error","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"ihMAAaA,EACG,+BADHA,EAEO,oCAFPA,EAGC,oCCEDC,EAAS,CAClB,QAAW,CACPC,KAAM,QACNC,IAAK,SAET,MAAS,CACLD,KAAM,QACNC,IAAK,aAKAC,EAAU,CACnBC,MAAO,CACHH,KAAM,QACNI,YAAY,GAAD,OAAKN,EAAL,eACXO,QAAS,UACTC,gBAAiB,SAErB,8BAA+B,CAC3BN,KAAM,8BACNI,YAAY,GAAD,OAAKN,EAAL,+BACXO,QAAS,QACTC,gBAAiB,kCAErB,oBAAqB,CACjBN,KAAM,oBACNI,YAAY,GAAD,OAAKN,EAAL,0BACXO,QAAS,QACTC,gBAAiB,6BAErB,iBAAkB,CACdN,KAAM,iBACNI,YAAY,GAAD,OAAKN,EAAL,uBACXO,QAAS,QACTC,gBAAiB,0BAErBC,MAAO,CACHP,KAAM,QACNI,YAAY,GAAD,OAAKN,EAAL,eACXO,QAAS,QACTC,gBAAiB,kBAErBE,MAAO,CACHR,KAAM,QACNI,YAAY,GAAD,OAAKN,EAAL,eACXO,QAAS,QACTC,gBAAiB,kBAErBG,aAAc,CACVT,KAAM,eACNI,YAAY,GAAD,OAAKN,EAAL,sBACXO,QAAS,QACTC,gBAAiB,yBAErBI,MAAO,CACHV,KAAM,QACNI,YAAY,GAAD,OAAKN,EAAL,eACXO,QAAS,QACTC,gBAAiB,kBAErBK,UAAW,CACPX,KAAM,YACNI,YAAY,GAAD,OAAKN,EAAL,mBACXO,QAAS,QACTC,gBAAiB,sBAErBM,OAAQ,CACJZ,KAAM,SACNI,YAAY,GAAD,OAAKN,EAAL,gBACXO,QAAS,QACTC,gBAAiB,mBAErBO,IAAK,CACDb,KAAM,MACNI,YAAY,GAAD,OAAKN,EAAL,aACXO,QAAS,QACTC,gBAAiB,gBAErBQ,QAAS,CACLd,KAAM,UACNI,YAAY,GAAD,OAAKN,EAAL,iBACXO,QAAS,QACTC,gBAAiB,oBAErBS,QAAS,CACLf,KAAM,UACNI,YAAY,GAAD,OAAKN,EAAL,iBACXO,QAAS,QACTC,gBAAiB,oBAErB,mBAAoB,CAChBN,KAAM,mBACNI,YAAY,GAAD,OAAKN,EAAL,yBACXO,QAAS,QACTC,gBAAiB,4BAErB,oBAAqB,CACjBN,KAAM,oBACNI,YAAY,GAAD,OAAKN,EAAL,sBACXO,QAAS,QACTC,gBAAiB,yBAErBU,UAAW,CACPhB,KAAM,YACNI,YAAY,GAAD,OAAKN,EAAL,mBACXO,QAAS,QACTC,gBAAiB,sBAErBW,OAAQ,CACJjB,KAAM,SACNI,YAAY,GAAD,OAAKN,EAAL,gBACXO,QAAS,QACTC,gBAAiB,mBAErB,iBAAkB,CACdN,KAAM,iBACNI,YAAY,GAAD,OAAKN,EAAL,uBACXO,QAAS,QACTC,gBAAiB,0BAErBY,YAAa,CACTlB,KAAM,cACNI,YAAY,GAAD,OAAKN,EAAL,qBACXO,QAAS,QACTC,gBAAiB,wBAErBa,QAAS,CACLnB,KAAM,UACNI,YAAY,GAAD,OAAKN,EAAL,iBACXO,QAAS,QACTC,gBAAiB,6BAErBc,UAAW,CACPpB,KAAM,YACNI,YAAY,GAAD,OAAKN,EAAL,mBACXO,QAAS,QACTC,gBAAiB,sBAErBe,QAAS,CACLrB,KAAM,UACNI,YAAY,GAAD,OAAKN,EAAL,iBACXO,QAAS,QACTC,gBAAiB,oBAErBgB,SAAU,CACNtB,KAAM,WACNI,YAAY,GAAD,OAAKN,EAAL,kBACXO,QAAS,QACTC,gBAAiB,qBAErBiB,OAAQ,CACJvB,KAAM,SACNI,YAAY,GAAD,OAAKN,EAAL,gBACXO,QAAS,QACTC,gBAAiB,mBAErBkB,OAAQ,CACJxB,KAAM,SACNI,YAAY,GAAD,OAAKN,EAAL,gBACXO,QAAS,QACTC,gBAAiB,mBAErBmB,UAAW,CACPzB,KAAM,YACNI,YAAY,GAAD,OAAKN,EAAL,mBACXO,QAAS,QACTC,gBAAiB,sBAErBoB,OAAQ,CACJ1B,KAAM,SACNI,YAAY,GAAD,OAAKN,EAAL,gBACXO,QAAS,QACTC,gBAAiB,mBAErB,aAAc,CACVN,KAAM,aACNI,YAAY,GAAD,OAAKN,EAAL,oBACXO,QAAS,QACTC,gBAAiB,sBAErBqB,UAAW,CACP3B,KAAM,YACNI,YAAY,GAAD,OAAKN,EAAL,kBACXO,QAAS,QACTC,gBAAiB,YAErBsB,QAAS,CACL5B,KAAM,UACNI,YAAY,GAAD,OAAKN,EAAL,iBACXO,QAAS,QACTC,gBAAiB,oBAErBuB,YAAa,CACT7B,KAAM,cACNI,YAAY,GAAD,OAAKN,EAAL,qBACXO,QAAS,QACTC,gBAAiB,wBAErB,gBAAiB,CACbN,KAAM,gBACNI,YAAY,GAAD,OAAKN,EAAL,sBACXO,QAAS,QACTC,gBAAiB,yBAGrB,cAAe,CACXN,KAAM,cACNI,YAAY,GAAD,OAAKN,EAAL,oBACXO,QAAS,QACTC,gBAAiB,wBCpNZwB,GAAb,mDACIC,KAAO,UADX,KAEIC,SAAW,GAFf,+PA4BQ,OADY9B,EAAQ+B,KAAKC,eA3BjC,4CAGKC,KAHL,wEAG4B,WAH5B,wCAIKA,KAJL,wEAI6B,MAJ7B,4CAMKC,KANL,oFAM6B,WACrB,EAAKL,KAAO,UACZ,EAAKG,UAAY,QACjB,EAAKG,WAAa,OAT1B,0CAYKD,KAZL,oFAY2B,SAACC,EAAYC,GAChC,EAAKP,KAAO,QACZ,EAAKG,UAAYI,EACjB,EAAKD,WAAWE,KAAKF,GAErB,EAAKA,WAAL,YAAsB,EAAKA,gBAjBnC,6CAoBKD,KApBL,oFAoB8B,SAACC,EAAYC,GACnC,EAAKN,SAAWM,EAChB,EAAKD,WAAW,GAAKA,EACrB,EAAKA,WAAL,YAAsB,EAAKA,gBAvBnC,sCA0BKG,KA1BL,0E,oFCCaC,I,OAAM,SAAC,GAQb,IAPLC,EAOI,EAPJA,QACAC,EAMI,EANJA,QACAC,EAKI,EALJA,OACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,cACAC,EACI,EADJA,qBAEMC,EAASC,mBAgDf,OA9CAC,qBAAU,WACR,IAAMC,EAAMC,aAAOJ,EAAOK,SACpBC,EAAaC,eAAcC,UAAU,CAAC,CAAC,EAAG,GAAI,CAACZ,EAAOD,IAAUD,GAChEe,EAAgBC,eAAUJ,WAAWA,GAE3CH,EACGQ,UAAU,WACVC,KAAKlB,EAAQmB,UACbC,KAAK,QACLC,KAAK,QAAS,UACdA,KAAK,KAAK,SAAAC,GAAO,OAAIP,EAAcO,MACnCD,KAAK,QAAQ,SAAAC,GACZ,IAAM3B,EAAa2B,EAAQC,WAAWlB,GAChCX,EAAaK,EACfA,EAAQyB,MAAK,SAAAC,GAAM,OAAIA,EAAOpE,OAASsC,KACvC,GACJ,OAAOD,GAAcA,EAAWgC,UAC5BvB,EAAWwB,SAASjC,EAAWgC,UAAW,KAC1C,sBAELE,GAAG,SAAS,SAAAN,GACX,GAAKlB,EAAL,CACA,IAAMT,EAAa2B,EAAQC,WAAWlB,GAChCX,EAAaK,EACjBA,EAAQyB,MAAK,SAAAC,GAAM,OAAIA,EAAOpE,OAASsC,KACvC,GACFS,EAAcV,EAAYC,OAE3BiC,GAAG,aAAa,SAAAC,GACf,IAAMC,EAASC,KAAMD,OACrBpB,aAAOoB,GAAQT,KAAK,QAAS,gBAE9BO,GAAG,cAAc,SAAAC,GAChB,IAAMC,EAASC,KAAMD,OACrBpB,aAAOoB,GAAQT,KAAK,QAAS,eAEhC,CACDrB,EACAD,EACAI,EACAF,EACAC,EACAG,EACAD,IAIA,yBAAK4B,UAAU,iBACb,yBACEC,GAAG,QACH/B,MAAOA,EACPD,OAAQA,EACRiC,QAAO,cAAShC,EAAT,YAAkBD,GACzBkC,oBAAoB,gBACpBC,IAAK9B,O,+GC3DP+B,GAAW,CACb,CACIJ,GAAI,EACJK,UAAW,SAACC,GACR,OAAO,kBAAC,KAAmBA,KAGnC,CACIN,GAAI,EACJK,UAAW,SAACC,GACR,OAAO,kBAAC,KAAsBA,MAK7BC,GAAeC,IAAMC,MAAK,YAKhC,IAJH/C,EAIE,EAJFA,WACAgD,EAGE,EAHFA,cACAzB,EAEE,EAFFA,KACA0B,EACE,EADFA,eAEQC,EAAMC,eAAND,EADN,EAGsBJ,IAAMM,SAAS,GAHrC,oBAGK3D,EAHL,KAGW4D,EAHX,KAIF,OACI,yBAAKhB,UAAWiB,KAAW,CAAE,yBAAyB,EAAM,YAAaN,KACrE,yBAAKX,UAAU,uBACX,0BAAMA,UAAU,OAAOkB,QAASN,GAAkC,MAC7DC,EAAElD,IAEP,0BAAMqC,UAAU,mBAERK,GAASc,KAAI,SAAAC,GACT,OAAOA,EAAKd,UAAU,CAClBhF,IAAI,cAAD,OAAgB8F,EAAKnB,IACxBD,UAAWiB,KAAW,CAAEG,MAAM,EAAMC,SAAUjE,IAASgE,EAAKnB,KAC5DqB,KAAM,GACNC,SAAU,QACVL,QAAS,kBAAMF,EAAQI,EAAKnB,YAMhD,yBAAKD,UAAU,cAEPd,GAAQA,EAAK9B,GAAM+D,KAAI,SAAAK,GACnB,OACI,yBAAKlG,IAAG,qBAAgBkG,EAAKnG,MAAQ2E,UAAS,qBAAgBwB,EAAKnG,OAC/D,6BAAMwF,EAAEW,EAAKnG,OACb,yBAAK2E,UAAU,aAAawB,GAAQA,EAAKC,MAAQD,EAAKC,MAAQ,IACzDD,GAAQA,EAAKE,MAAQ,0BAAM1B,UAAU,cAAcwB,EAAKE,MAAM,kBAAC,KAAD,OAA8C,aAS9I,SAACC,EAAUC,GACV,OACID,EAAShE,aAAeiE,EAASjE,YAC9BkE,KAAEC,QAAQH,EAAUC,M,uHC1DzBG,I,OAAYC,aAAW,CAC3BC,KAAM,CACJ/D,MAAO,IACPD,OAAQ,OACRiE,gBAAiB,UACjBC,WAAY,OAIHC,GAAWC,cAAS,WAC/B,IAAMC,EAAUP,KAECQ,EACbC,KADFC,YAAeF,aAEjB,OACE,yBACEvC,UAAW0C,aAAKJ,EAAQL,MACxBU,KAAK,eACLzB,QAASqB,GAAa,GACtBK,UAAWL,GAAa,IAExB,kBAACM,GAAA,EAAD,KACG,CAAC,aAAa1B,KAAI,SAAC2B,EAAMC,GAAP,OACjB,kBAAC,IAAD,CAAMC,GAAG,aACP,kBAACC,GAAA,EAAD,CAAUC,QAAM,EAAC5H,IAAKwH,GACpB,kBAACK,GAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,KAAD,MAAgB,kBAAC,KAAD,OAErC,kBAACK,GAAA,EAAD,CAAcC,QAASP,UAK/B,kBAACQ,GAAA,EAAD,U,UC1COC,GAA2BlB,cAAS,WAAO,IAAD,EAGjDG,KADFC,YAAee,EAFoC,EAEpCA,KAAMjB,EAF8B,EAE9BA,aAEvB,OACE,6BACE,kBAAC,IAAMkB,SAAP,KACE,kBAACC,GAAA,EAAD,CACEC,OAAQ,OACRH,KAAMA,EACNI,QAASrB,GAAa,GACtBsB,OAAQtB,GAAa,IAErB,kBAACH,GAAD,Y,iFCTG0B,I,OAAYzB,cAAS,WAAO,IAAD,EAMlCG,KAJaD,EAFqB,EAEpCE,YAAeF,aAEbwB,EAJkC,EAGpCC,UACED,YAJkC,EAOHhD,mBAAS,MAPN,oBAO/BkD,EAP+B,KAOzBC,EAPyB,KAatC,OAAQ,yBAAKlE,UAAU,QACrB,kBAACmE,GAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,GAAA,EAAD,CAAS/B,QAAS,CAChBgC,KAAM,SAEN,kBAACC,GAAA,EAAD,CAAYC,KAAK,QAAQxE,UAAU,aAAayE,MAAM,QAAQC,aAAW,OAAOxD,QAASqB,GAAa,IACpG,kBAAC,KAAD,OAEF,yBAAKoC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,gBAAiBC,KAAM,IACpE,kBAACC,GAAA,EAAD,CAAYC,QAAQ,MAClB,kBAAC,IAAD,CAAMhF,UAAU,OAAOgD,GAAG,KACxB,0BAAMhD,UAAU,SAAhB,eACA,0BAAMA,UAAU,cAAhB,UACA,0BAAMA,UAAU,aAAhB,KACA,0BAAMA,UAAU,QAAhB,SAGJ,yBAAKA,UAAU,QACb,kBAACiF,GAAA,EAAD,CACEC,QAAQ,2BACRjF,GAAG,qBACHwB,MAAOwC,EACPkB,SAAU,SAAAC,GAAC,OA3BJ,SAACnB,GAClBC,EAAkBD,GAClBF,EAAYE,GAyBWoB,CAAWD,EAAEtF,OAAO2B,QACjC6D,kBAAgB,EAChBhD,QAAS,CAAElB,KAAK,mBAEhB,kBAACmE,GAAA,EAAD,CAAU9D,MAAM,MAAhB,WACA,kBAAC8D,GAAA,EAAD,CAAU9D,MAAM,OAAhB,4C,6BC/CD+D,GAAgBC,cAAW,SAACvG,GAAU,IAAD,gBAE9C,MAAO,CACH,CAAC,CACG7D,KAAM,YACNoG,MAAK,iBAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAMQ,iBAAR,QAAqB,EAC1BgC,MAAK,iBAAExC,QAAF,IAAEA,OAAF,EAAEA,EAAMwG,sBAAR,QAAwB,GAEjC,CACIrK,KAAM,YACNoG,MAAK,iBAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAMyG,iBAAR,QAAqB,GAE9B,CACItK,KAAM,SACNoG,MAAK,iBAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAM0G,cAAR,QAAkB,GAE3B,CACIvK,KAAM,OACNoG,MAAK,iBAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAM2G,cAAR,QAAkB,IAE3B,CAAC,CACGxK,KAAM,YACNoG,MAAK,iBAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAMQ,iBAAR,QAAqB,GAE9B,CACIrE,KAAM,YACNoG,MAAK,iBAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAM4G,sBAAR,QAA0B,GAEnC,CACIzK,KAAM,OACNoG,MAAK,iBAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAM6G,iBAAR,QAAqB,QAGnC,SAACpE,EAAUC,GACV,OAAQC,KAAEC,QAAQH,EAAS,GAAIC,EAAS,OCjC/BoE,GAAyBP,cAAW,SAACQ,EAAgBC,GAC9D,GAAIrE,KAAEsE,QAAQF,IAAmBpE,KAAEsE,QAAQD,GAAY,MAAO,GAG9D,IAFA,IAAME,EAAgB,GAChBC,EAAeJ,EAAeK,OAHwC,WAInEC,GAJmE,QAKpEC,EAAiB,oBAAGP,EAAeM,UAAlB,aAAG,EAAmBlL,YAAtB,aAA8BoL,EACnD,GAAID,EAAmB,CACnB,IAAIE,EAAUR,EAAU1G,MAAK,SAAAmH,GACzB,MAA0B,UAAtBH,EACuB,UAAhBG,EAAMA,MAENA,EAAMA,QAAUH,KAG1B3E,KAAEsE,QAAQO,GAMXN,EAAcxI,KAAKgJ,YAAKX,EAAeM,KALvCH,EAAcxI,KAAd,gBACOgJ,YAAKX,EAAeM,IAD3B,GAEOG,MAbVH,EAAI,EAAGA,EAAIF,EAAcE,IAAM,EAA/BA,GAsBT,OAAOH,KCfLS,I,OAAapB,cACjB,SAACzH,EAAS8I,GACR,OAAO9I,GAAW8I,GAAc9I,EAAQ+I,QAAQD,EAAWnL,iBACvDqL,KACEhJ,EACA4I,YAAK5I,EAAQ+I,QAAQD,EAAWnL,mBAElC,QAEN,SAACsL,EAASC,GAAV,OACED,EAAQ,GAAG5L,OAAS6L,EAAQ,GAAG7L,MAAQ4L,EAAQ,KAAOC,EAAQ,OAG5DC,GAAgB,SAAAxJ,GACpB,MAAsB,YAAfA,GAGHyJ,GAAmB3B,cAAW,SAAAvG,GAClC,GAAIA,GAAQA,EAAKoH,OAAQ,CACvB,IAAMe,EAAUC,aAAIpI,GAAM,SAAAyH,GAAK,OAAIhH,SAASgH,EAAMjH,UAAW,OACvD6H,EAAUC,aAAItI,GAAM,SAAAyH,GAAK,OAAIhH,SAASgH,EAAMjH,UAAW,OAC7D,OAAO+H,eACJC,OAAO,CAACL,EAASE,IACjBI,MAAM,CAAC,mBAAoB,YAE9B,OAAO,QAIEC,GAAYvF,cACvB,YAAwD,IAAD,cAApD4D,EAAoD,EAApDA,eAAgB4B,EAAoC,EAApCA,kBAAmBC,EAAiB,EAAjBA,WAAiB,EAajDtF,KAbiD,IAEnDuF,SACE3K,EAHiD,EAGjDA,KACAG,EAJiD,EAIjDA,UACAF,EALiD,EAKjDA,SACAyJ,EANiD,EAMjDA,WACAkB,EAPiD,EAOjDA,aACAC,EARiD,EAQjDA,gBACAC,EATiD,EASjDA,eACAxK,EAViD,EAUjDA,WAViD,IAYnDyK,cAAiBnK,EAZkC,EAYlCA,QAASoK,EAZyB,EAYzBA,qBAI5B5J,qBAAU,WACJpB,GACFgL,EAAqBtB,KAEtB,CAAC1J,EAAM0J,EAAYsB,IApB+B,IAqB7CvH,EAAMC,eAAND,EAEFwH,EAAUxB,GAAW7I,EAAS8I,GAC9B3I,EAAaiJ,GACjBD,GAAc/J,GAAQ6I,EAAiB4B,EAAkBtK,IAG3D,OACE,oCACE,kBAACiD,GAAD,CACE7C,WAAYkD,EAAE,SACdF,eAAe,EACfzB,KAAMsG,GAAc,CAClBI,OAAM,iBAAEkC,QAAF,IAAEA,OAAF,EAAEA,EAAYlC,cAAd,QAAwB,EAC9BD,UAAS,iBAAEmC,QAAF,IAAEA,OAAF,EAAEA,EAAYnC,iBAAd,QAA2B,EACpCjG,UAAS,iBAAEoI,QAAF,IAAEA,OAAF,EAAEA,EAAYpI,iBAAd,QAA2B,EACpCgG,eAAc,iBAAEoC,QAAF,IAAEA,OAAF,EAAEA,EAAYpC,sBAAd,QAAgC,EAC9CG,OAAM,iBAAEiC,QAAF,IAAEA,OAAF,EAAEA,EAAYjC,cAAd,QAAwB,EAC9BC,eAAc,iBAAEgC,QAAF,IAAEA,OAAF,EAAEA,EAAYhC,sBAAd,QAAgC,EAC9CC,UAAS,iBAAE+B,QAAF,IAAEA,OAAF,EAAEA,EAAY/B,iBAAd,QAA2B,EACpCtG,OAAQ,UAEVmB,eAAgBsH,IAEjBxK,GACCA,EAAWyD,KAAI,SAAAK,GAAS,IAAD,cACrB,OACE,kBAAChB,GAAD,CACElF,IAAKkG,EAAOA,EAAK8G,YAAcjL,EAC/BM,WAAY6D,EAAOA,EAAK8G,YAAcjL,EACtC6B,KAAMsG,GAAc,CAClBI,OAAM,iBAAEpE,QAAF,IAAEA,OAAF,EAAEA,EAAMoE,cAAR,QAAkB,EACxBD,UAAS,iBAAEnE,QAAF,IAAEA,OAAF,EAAEA,EAAMmE,iBAAR,QAAqB,EAC9BjG,UAAS,iBAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAM9B,iBAAR,QAAqB,EAC9BgG,eAAc,iBAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAMkE,sBAAR,QAA0B,EACxCG,OAAM,iBAAErE,QAAF,IAAEA,OAAF,EAAEA,EAAMqE,cAAR,QAAkB,EACxBC,eAAc,iBAAEtE,QAAF,IAAEA,OAAF,EAAEA,EAAMsE,sBAAR,QAA0B,EACxCC,UAAS,iBAAEvE,QAAF,IAAEA,OAAF,EAAEA,EAAMuE,iBAAR,QAAqB,EAC9BtG,OAAQ+B,EAAOA,EAAK8G,YAAcjL,SAK5C,kBAAC,KAAD,MACG,YAAwB,IAArBY,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACJqK,EACJtK,GT9Ga,MS8GWP,EAAW4I,OT7Gd,IS8GjBkC,EAAiBtK,ET9GA,GS+GvB,OACEmK,GACE,yBACErI,UAAU,oBACV2E,MAAO,CAAEzG,MAAOsK,EAAgBvK,OAAQsK,IAExC,kBAAC,GAAD,CACEnK,cACE+I,GAAc/J,GAAQ4K,EAAeC,EAEvC9J,WAAYA,EACZ6B,UAAW,QACX3B,qBAAsBjD,EAAOgC,GAAM9B,IACnC2C,OAAQsK,EACRrK,MAAOsK,EACPzK,QACEoJ,GAAc/J,GACVwJ,YAAKX,GACLW,YAAKiB,EAAkBtK,IAE7BS,QAASqK,YC9HhBI,I,OAAUpG,cAAS,WAAO,IAAD,EAUhCG,KARF2F,cACEO,EAHgC,EAGhCA,kBACAC,EAJgC,EAIhCA,qBACAC,EALgC,EAKhCA,aACA3C,EANgC,EAMhCA,eACAC,EAPgC,EAOhCA,UACA2B,EARgC,EAQhCA,kBAIJrJ,qBAAU,WACRkK,IACAC,IACAC,MACC,CAACF,EAAmBC,EAAsBC,IAE7C,IAAMC,EAAqB7C,GAAuBC,EAAgBC,GAClE,OACE,yBAAKlG,UAAU,oBACb,6BACE,kBAAC,GAAD,CACE8H,WAAYe,EAAqBA,EAAmB,GAAK,GACzD5C,eACE4C,GAAsBA,EAAmBC,MAAM,EAAGD,EAAmBvC,QAEvEuB,kBAAmBA,UCjChBkB,GAAQ,WACjB,OACI,uC,oBCGKC,I,OAAW,SAAC,GAAc,IAAZ9J,EAAW,EAAXA,KACzB,OACE,kBAAC+J,GAAA,EAAD,CAAMjJ,UAAU,iBAAiBgF,QAAQ,YACvC,kBAACkE,GAAA,EAAD,KACE,yBAAKlJ,UAAU,aACb,8BAAOd,EAAKiK,wBAEd,yBAAKnJ,UAAU,gBACb,yBAAKA,UAAU,sBACb,wCACA,yBAAKA,UAAU,cAAcd,EAAKkK,WAEpC,yBAAKpJ,UAAU,yBACb,2CACA,yBAAKA,UAAU,cAAcd,EAAKmK,cAEpC,yBAAKrJ,UAAU,sBACb,+CACA,yBAAKA,UAAU,cAAcd,EAAKoK,uC,oBClBjCC,I,OAAa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OACE,yBAAKxJ,UAAU,eACZwJ,EAAQrI,KAAI,SAACsI,GACZ,OACE,kBAACC,GAAA,EAAD,CAAapO,IAAKmO,EAAOnO,IAAK0E,UAAU,UACtC,kBAAC2J,GAAA,EAAD,CAAY1J,GAAE,mCAA8BwJ,EAAOnO,MAAnD,UACMmO,EAAOG,QAEb,kBAAC3E,GAAA,EAAD,CACEC,QAAO,mCAA8BuE,EAAOnO,KAC5C2E,GAAG,qBACHwB,MAAOgI,EAAOhI,MACd0D,SAAUsE,EAAOI,UAEhBJ,EAAOxH,KAAKd,KAAI,SAACK,GAChB,OACE,kBAAC+D,GAAA,EAAD,CAAUjK,IAAG,eAAUmO,EAAOnO,IAAjB,YAAwBkG,GAAQC,MAAOD,GACjDA,cCnBRsI,I,OAAgBzH,cAAS,WAAO,IAAD,EAGtCG,KADFuH,SAAYC,EAF4B,EAE5BA,gBAAiBC,EAFW,EAEXA,eAAgBC,EAFL,EAEKA,aAO/C,OAJAzJ,IAAMjC,WAAU,WACdwL,MACC,CAACA,IAGF,yBAAKhK,UAAU,uBACb,kBAAC,GAAD,CAAYwJ,QAASS,IACrB,yBAAKjK,UAAU,aACZkK,GACCA,EAAa/I,KAAI,SAACjC,GAChB,OAAO,kBAAC,GAAD,CAAUA,KAAMA,aChBtBiL,IAAb,wCACID,aAAe,KADnB,qPAEK1M,KAFL,wEAE+B,MAF/B,4CAGKA,KAHL,wEAGiC,CACzB,CAAElC,IAAK,QAASsO,MAAO,QAASC,SAAUvM,KAAK8M,YAAanI,KAAM,GAAIoI,SAAS,EAAO5I,MAAO,IAC7F,CAAEnG,IAAK,OAAQsO,MAAO,OAAQC,SAAUvM,KAAKgN,WAAYrI,KAAM,GAAIoI,SAAS,EAAM5I,MAAO,QALjG,yCAQKhE,KARL,oFAQ0B,SAAC2H,GACnB,IAAMmF,EAAgBnF,EAAEtF,OAAO2B,MAC/B,EAAKwI,eAAiB,EAAKA,eAAe9I,KAAI,SAAAK,GAC1C,OAAQA,EAAKlG,KACT,IAAK,QACD,OAAO,gBACAkG,EADP,CAEIC,MAAO8I,IAEf,IAAK,OACD,OAAO,gBACA/I,EADP,CAEIC,MAAO,GACPQ,KAAMJ,KAAE2I,KAAK,EAAKC,aAAaF,MAEvC,IAAK,OACD,OAAO,gBACA/I,EADP,CAEIC,MAAO,GACPQ,KAAM,aA3B9B,wCAiCKxE,KAjCL,oFAiCyB,SAAC2H,GAClB,IAAMsF,EAAetF,EAAEtF,OAAO2B,MACxB8I,EAAgB,EAAKN,eAAezK,MAAK,SAAAgC,GAAI,MAAiB,UAAbA,EAAKlG,OAAiBmG,MAC7E,EAAKyI,aAAe,EAAKO,aAAaF,GAAeG,GACrD,EAAKT,eAAiB,EAAKA,eAAe9I,KAAI,SAAAK,GAC1C,OAAQA,EAAKlG,KACT,IAAK,QACD,OAAOkG,EACX,IAAK,OACD,OAAO,gBACAA,EADP,CAEIC,MAAOiJ,IAEf,IAAK,OACD,OAAO,gBACAlJ,EADP,CAEIC,MAAO,GACPQ,KAAMJ,KAAE2I,KAAK,EAAKC,aAAaF,GAAeG,cAlDtE,6CA2EKjN,KA3EL,2GA2E8B,gCAAAkN,EAAA,sEACCC,KAAMC,IAAN,UAAa1P,EAAb,8BADD,gBACd+D,EADc,EACdA,KACR,EAAKuL,aAAevL,EAAK4L,UAAUC,QAAO,SAACC,EAAQxJ,GAC/C,IAAImF,EAAQqE,EAAOxJ,EAAKmF,OAASqE,EAAOxJ,EAAKmF,QAAU,GAIvD,OAHWA,EAAMnF,EAAKyJ,MAAQtE,EAAMnF,EAAKyJ,OAAS,IAE7CrN,KAAK4D,GACHwJ,IACR,IAEGE,EAASC,OAAOX,KAAK,EAAKC,cAChC,EAAKR,eAAiB,EAAKA,eAAe9I,KAAI,SAAAK,GAC1C,MAAiB,UAAbA,EAAKlG,IACE,gBACAkG,EADP,CAEIS,KAAMiJ,IAGH1J,KAlBO,8CA3E9B,GCAa4J,IAAb,oaACK5N,KADL,yEACiC,QADjC,+CAEKA,KAFL,yEAEoC,QAFpC,uCAGKA,KAHL,yEAG4B,QAH5B,qCAIKA,KAJL,yEAI0B,QAJ1B,+CAMKC,KANL,2GAMgC,8BAAAkN,EAAA,sEACDC,KAAMC,IAAN,UAAa1P,EAAb,eADC,gBAChB+D,EADgB,EAChBA,KACR,EAAK+G,eAAiB/G,EAAKmM,UAAUlK,KAAI,SAAAwF,GAAK,uBACvCA,EADuC,CAE1CtL,KAAMsL,EAAMA,MACZ2B,YAAa3B,EAAMA,WALC,8CANhC,kDAgBKlJ,KAhBL,2GAgBmC,sCAAAkN,EAAA,sEACJC,KAAMC,IAAN,UAAa1P,EAAb,8BADI,OAG3B,IAASG,KAHkB,SACnB4D,EADmB,EACnBA,KACFoM,EAAgB,GACNpM,EAGZ,IAASqM,KAFHC,EAActM,EAAK5D,GAAO4D,EAAK5D,GAAKmQ,aAAe,GACzDH,EAAchQ,GAAO,GACFkQ,EACfF,EAAchQ,GAAKsC,KAAnB,cACIvC,KAAMkQ,EACNjD,YAAaiD,GACVC,EAAYD,KAI3B,EAAK1D,kBAAoByD,EAdE,8CAhBnC,0CAmCK7N,KAnCL,2GAmC2B,kCAAAkN,EAAA,sEACIC,KAAMC,IAAN,UAAa1P,EAAb,qBADJ,gBACX+D,EADW,EACXA,KAER,EAAKgH,UAAL,iBAAiBhH,QAAjB,IAAiBA,GAAjB,UAAiBA,EAAMA,YAAvB,aAAiB,EAAYwM,gBAA7B,QAAyC,GAHtB,8CAnC3B,kDAyCKjO,KAzCL,4HAyCmC,WAAOqJ,GAAP,iBAAA6D,EAAA,sEACJC,KAAMC,IAAI/D,EAAWrL,aADjB,gBACnByD,EADmB,EACnBA,KACR,EAAKlB,QAAUkB,EAFY,2CAzCnC,4DCFayM,IAAb,oIAKWC,GACPtO,KAAKuO,MAAQD,MANjB,wCACGpO,KADH,wEAEU,WAFV,oCAIGC,KAJH,wECAaqO,IAAb,EACI,WAAaC,GAAS,0KAClBzO,KAAKyO,OAASA,GAFtB,sCAIGvO,KAJH,wEAIyB,QAJzB,oCAKGA,KALH,yEAKuB,QALvB,2CAOGC,KAPH,oFAO0B,SAACsO,GACvB,EAAKA,OAASA,MARlB,yCAWGtO,KAXH,oFAYgB,SAACuO,GACb,EAAKC,SAAWD,EAChB,EAAKD,OAAOG,eAAeF,OAd/B,GCDaG,IAAb,8IACK3O,KADL,yEACuB,KADvB,0CAGKC,KAHL,oFAG2B,SAAC+F,GAAD,OAAU,SAAAzD,KAGzBA,GACe,YAAfA,EAAMqM,MACS,QAAdrM,EAAMzE,KAA+B,UAAdyE,EAAMzE,OAIlC,EAAKkI,KAAOA,QAZpB,G,4DCMA6I,KACGC,IAAIC,MACJD,IAAIE,MACJC,KAAK,CACJC,OAAO,EACPC,IAAK,KACLC,YAAa,KAEbC,cAAc,EAEdC,cAAe,CACbC,aAAa,GAGfjC,UAAW,CACTkC,GAAI,CACFC,aAAcC,IAEhBC,IAAK,CACHF,aAAcG,IAEhBC,IAAK,CACHJ,aAAcK,KAIlBC,GAAI,CAAC,gBACLC,UAAW,iBAGAnB,UAAf,E,SChCaoB,GAAgBhN,IAAMiN,cAAc,MAEpCC,GAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxBC,EAAQC,cAAc,iBAAO,CACjC3F,cAAe,IAAIiD,GACnB2C,WAAY,IAAIpC,GAChB5D,SAAU,IAAI5K,EACd6G,UAAW,IAAI8H,GAAWO,IAC1B5J,YAAa,IAAI0J,GACjBpC,SAAU,IAAII,OAEhB,OACE,kBAACsD,GAAcO,SAAf,CAAwBvM,MAAOoM,GAC7B,kBAAC,KAAD,CAAiBxB,KAAMA,IACpBuB,KAMIpL,GAAW,WACtB,IAAMqL,EAAQpN,IAAMwN,WAAWR,IAC/B,IAAKI,EAEH,MAAM,IAAIK,MAAM,iDAElB,OAAOL,G,OCIMM,OA1Bf,WACE,OACE,yBAAKnO,UAAU,OACb,kBAAC,GAAD,KACE,kBAAC,IAAD,KACE,gCAAQ,kBAAC8D,GAAD,OACR,kBAACP,GAAD,MACA,yBAAKvD,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoO,KAAK,UACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,GAAD,aCdVC,GAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzI,QACfmI,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,GAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,GAAN,sBAEP/B,KAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQ5F,IAAI,gBAEnB,MAApB6F,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,GAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,GAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.f380c92c.chunk.js","sourcesContent":["export const AppConfig = {\n    apiBaseUrl: 'https://api.covid19india.org',\n    apiRootBaseUrl: 'https://api.rootnet.in/covid19-in',\n    baseTopo: 'https://www.covid19india.org/maps'\n}","import { AppConfig } from '../../conf'\n\nexport const STRIPHEIGHT = 80;\nexport const MAPCONTAINERPADDING = 40\n\nexport const geoMap = {\n    'country': {\n        name: 'India',\n        key: 'st_nm'\n    },\n    'state': {\n        name: 'state',\n        key: 'district'\n    }\n}\n\n\nexport const mapMeta = {\n    India: {\n        name: 'India',\n        geoDataFile: `${AppConfig.baseTopo}/india.json`,\n        mapType: 'country',\n        graphObjectName: 'india',\n    },\n    'Andaman and Nicobar Islands': {\n        name: 'Andaman and Nicobar Islands',\n        geoDataFile: `${AppConfig.baseTopo}/andamannicobarislands.json`,\n        mapType: 'state',\n        graphObjectName: 'andamannicobarislands_district',\n    },\n    'Arunachal Pradesh': {\n        name: 'Arunachal Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/arunachalpradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'arunachalpradesh_district',\n    },\n    'Andhra Pradesh': {\n        name: 'Andhra Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/andhrapradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'andhrapradesh_district',\n    },\n    Assam: {\n        name: 'Assam',\n        geoDataFile: `${AppConfig.baseTopo}/assam.json`,\n        mapType: 'state',\n        graphObjectName: 'assam_district',\n    },\n    Bihar: {\n        name: 'Bihar',\n        geoDataFile: `${AppConfig.baseTopo}/bihar.json`,\n        mapType: 'state',\n        graphObjectName: 'bihar_district',\n    },\n    Chhattisgarh: {\n        name: 'Chhattisgarh',\n        geoDataFile: `${AppConfig.baseTopo}/chhattisgarh.json`,\n        mapType: 'state',\n        graphObjectName: 'chhattisgarh_district',\n    },\n    Delhi: {\n        name: 'Delhi',\n        geoDataFile: `${AppConfig.baseTopo}/delhi.json`,\n        mapType: 'state',\n        graphObjectName: 'delhi_district',\n    },\n    Karnataka: {\n        name: 'Karnataka',\n        geoDataFile: `${AppConfig.baseTopo}/karnataka.json`,\n        mapType: 'state',\n        graphObjectName: 'karnataka_district',\n    },\n    Kerala: {\n        name: 'Kerala',\n        geoDataFile: `${AppConfig.baseTopo}/kerala.json`,\n        mapType: 'state',\n        graphObjectName: 'kerala_district',\n    },\n    Goa: {\n        name: 'Goa',\n        geoDataFile: `${AppConfig.baseTopo}/goa.json`,\n        mapType: 'state',\n        graphObjectName: 'goa_district',\n    },\n    Gujarat: {\n        name: 'Gujarat',\n        geoDataFile: `${AppConfig.baseTopo}/gujarat.json`,\n        mapType: 'state',\n        graphObjectName: 'gujarat_district',\n    },\n    Haryana: {\n        name: 'Haryana',\n        geoDataFile: `${AppConfig.baseTopo}/haryana.json`,\n        mapType: 'state',\n        graphObjectName: 'haryana_district',\n    },\n    'Himachal Pradesh': {\n        name: 'Himachal Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/himachalpradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'himachalpradesh_district',\n    },\n    'Jammu and Kashmir': {\n        name: 'Jammu and Kashmir',\n        geoDataFile: `${AppConfig.baseTopo}/jammukashmir.json`,\n        mapType: 'state',\n        graphObjectName: 'jammukashmir_district',\n    },\n    Jharkhand: {\n        name: 'Jharkhand',\n        geoDataFile: `${AppConfig.baseTopo}/jharkhand.json`,\n        mapType: 'state',\n        graphObjectName: 'jharkhand_district',\n    },\n    Ladakh: {\n        name: 'Ladakh',\n        geoDataFile: `${AppConfig.baseTopo}/ladakh.json`,\n        mapType: 'state',\n        graphObjectName: 'ladakh_district',\n    },\n    'Madhya Pradesh': {\n        name: 'Madhya Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/madhyapradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'madhyapradesh_district',\n    },\n    Maharashtra: {\n        name: 'Maharashtra',\n        geoDataFile: `${AppConfig.baseTopo}/maharashtra.json`,\n        mapType: 'state',\n        graphObjectName: 'maharashtra_district',\n    },\n    Manipur: {\n        name: 'Manipur',\n        geoDataFile: `${AppConfig.baseTopo}/manipur.json`,\n        mapType: 'state',\n        graphObjectName: 'manipur_pre2016_districts',\n    },\n    Meghalaya: {\n        name: 'Meghalaya',\n        geoDataFile: `${AppConfig.baseTopo}/meghalaya.json`,\n        mapType: 'state',\n        graphObjectName: 'meghalaya_district',\n    },\n    Mizoram: {\n        name: 'Mizoram',\n        geoDataFile: `${AppConfig.baseTopo}/mizoram.json`,\n        mapType: 'state',\n        graphObjectName: 'mizoram_district',\n    },\n    Nagaland: {\n        name: 'Nagaland',\n        geoDataFile: `${AppConfig.baseTopo}/nagaland.json`,\n        mapType: 'state',\n        graphObjectName: 'nagaland_district',\n    },\n    Odisha: {\n        name: 'Odisha',\n        geoDataFile: `${AppConfig.baseTopo}/odisha.json`,\n        mapType: 'state',\n        graphObjectName: 'odisha_district',\n    },\n    Punjab: {\n        name: 'Punjab',\n        geoDataFile: `${AppConfig.baseTopo}/punjab.json`,\n        mapType: 'state',\n        graphObjectName: 'punjab_district',\n    },\n    Rajasthan: {\n        name: 'Rajasthan',\n        geoDataFile: `${AppConfig.baseTopo}/rajasthan.json`,\n        mapType: 'state',\n        graphObjectName: 'rajasthan_district',\n    },\n    Sikkim: {\n        name: 'Sikkim',\n        geoDataFile: `${AppConfig.baseTopo}/sikkim.json`,\n        mapType: 'state',\n        graphObjectName: 'sikkim_district',\n    },\n    'Tamil Nadu': {\n        name: 'Tamil Nadu',\n        geoDataFile: `${AppConfig.baseTopo}/tamil-nadu.json`,\n        mapType: 'state',\n        graphObjectName: 'tamilnadu_district',\n    },\n    Telangana: {\n        name: 'Telangana',\n        geoDataFile: `${AppConfig.baseTopo}/telugana.json`,\n        mapType: 'state',\n        graphObjectName: 'telugana',\n    },\n    Tripura: {\n        name: 'Tripura',\n        geoDataFile: `${AppConfig.baseTopo}/tripura.json`,\n        mapType: 'state',\n        graphObjectName: 'tripura_district',\n    },\n    Uttarakhand: {\n        name: 'Uttarakhand',\n        geoDataFile: `${AppConfig.baseTopo}/uttarakhand.json`,\n        mapType: 'state',\n        graphObjectName: 'uttarakhand_district',\n    },\n    'Uttar Pradesh': {\n        name: 'Uttar Pradesh',\n        geoDataFile: `${AppConfig.baseTopo}/uttarpradesh.json`,\n        mapType: 'state',\n        graphObjectName: 'uttarpradesh_district',\n    },\n\n    'West Bengal': {\n        name: 'West Bengal',\n        geoDataFile: `${AppConfig.baseTopo}/westbengal.json`,\n        mapType: 'state',\n        graphObjectName: 'westbengal_district',\n    },\n};\n\n","import { observable, action, computed, toJS } from 'mobx'\nimport { mapMeta } from '../modules/common/constants'\n\nexport class MapState {\n    view = 'country'\n    district = ''\n    @observable geoRegion = 'India'\n    @observable regionData = []\n\n    @action setCountryView = () => {\n        this.view = 'country'\n        this.geoRegion = 'India'\n        this.regionData = []\n    }\n\n    @action setStateView = (regionData, regionName) => {\n        this.view = 'state'\n        this.geoRegion = regionName\n        this.regionData.push(regionData)\n        // console.log(toJS(this.regionData))\n        this.regionData = [...this.regionData]\n    }\n\n    @action setDistrictView = (regionData, regionName) => {\n        this.district = regionName\n        this.regionData[1] = regionData\n        this.regionData = [...this.regionData]\n    }\n\n    @computed get viewObject() {\n        const obj = mapMeta[this.geoRegion]\n        return obj\n    }\n}","import React, { useRef, useEffect } from \"react\";\nimport { select, geoPath, geoMercator, event } from \"d3\";\nimport \"./Map.css\";\n\nexport const Map = ({\n  mapData,\n  geoData,\n  height,\n  width,\n  colorScale,\n  onRegionClick,\n  keyToPickFromGeoData\n}) => {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const projection = geoMercator().fitExtent([[0, 0], [width, height]], geoData);\n    const pathGenerator = geoPath().projection(projection);\n\n    svg\n      .selectAll(\".states\")\n      .data(geoData.features)\n      .join(\"path\")\n      .attr(\"class\", \"states\")\n      .attr(\"d\", feature => pathGenerator(feature))\n      .attr(\"fill\", feature => {\n        const regionName = feature.properties[keyToPickFromGeoData];\n        const regionData = mapData\n          ? mapData.find(region => region.name === regionName)\n          : [];\n        return regionData && regionData.confirmed\n          ? colorScale(parseInt(regionData.confirmed, 10))\n          : \"rgb(255,250,250)\";\n      })\n      .on(\"click\", feature => {\n        if (!onRegionClick) return;\n        const regionName = feature.properties[keyToPickFromGeoData];\n        const regionData = mapData\n        ? mapData.find(region => region.name === regionName)\n        : [];\n        onRegionClick(regionData, regionName);\n      })\n      .on(\"mouseover\", d => {\n        const target = event.target;\n        select(target).attr(\"class\", \"map-hover\");\n      })\n      .on(\"mouseleave\", d => {\n        const target = event.target;\n        select(target).attr(\"class\", \"states\");\n      });\n  }, [\n    geoData,\n    mapData,\n    colorScale,\n    height,\n    width,\n    keyToPickFromGeoData,\n    onRegionClick\n  ]);\n\n  return (\n    <div className=\"map-container\">\n      <svg\n        id=\"chart\"\n        width={width}\n        height={height}\n        viewBox={`0 0 ${width} ${height}`}\n        preserveAspectRatio=\"xMidYMid meet\"\n        ref={svgRef}\n      ></svg>\n    </div>\n  );\n};\n","import React from 'react';\nimport './counterStrip.css'\nimport ArrowDropUpIcon from '@material-ui/icons/ArrowDropUp';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\n\nimport _ from 'lodash';\nimport { useTranslation } from 'react-i18next'\nimport classNames from 'classnames'\n\nconst viewIcon = [\n    {\n        id: 0,\n        component: (props) => {\n            return <AssessmentIcon {...props}></AssessmentIcon>\n        },\n    },\n    {\n        id: 1,\n        component: (props) => {\n            return <LocalHospitalIcon {...props}></LocalHospitalIcon>\n        }\n    },\n]\n\nexport const CounterStrip = React.memo(({\n    regionName,\n    backNavigator,\n    data,\n    onClickHandler\n}) => {\n    const { t } = useTranslation()\n\n    const [view, setView] = React.useState(0)\n    return (\n        <div className={classNames({ 'count-strip-container': true, 'nav-strip': backNavigator })}>\n            <div className='item name-container'>\n                <span className=\"name\" onClick={onClickHandler ? onClickHandler : null}>\n                    {t(regionName)}\n                </span>\n                <span className='drill-down-stat'>\n                    {\n                        viewIcon.map(icon => {\n                            return icon.component({\n                                key: `drill-icon-${icon.id}`,\n                                className: classNames({ icon: true, selected: view === icon.id }),\n                                size: 10,\n                                fontSize: 'small',\n                                onClick: () => setView(icon.id)\n                            })\n                        })\n                    }\n                </span>\n            </div>\n            <div className='item count'>\n                {\n                    data && data[view].map(item => {\n                        return (\n                            <div key={`regionName-${item.name}`} className={`count-item ${item.name}`}>\n                                <div>{t(item.name)}</div>\n                                <div className=\"count-val\">{item && item.value ? item.value : '-'}\n                                    {item && item.delta ? <span className='delta-icon'>{item.delta}<ArrowDropUpIcon ></ArrowDropUpIcon></span> : ''}\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    );\n}, (oldProps, newProps) => {\n    return (\n        oldProps.regionName === newProps.regionName\n        && _.isEqual(oldProps, newProps)\n    )\n})\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport { useStore } from \"../../../contexts\";\nimport { observer } from \"mobx-react\";\nimport { Link } from \"react-router-dom\";\nimport './Menu.css'\n\nconst useStyles = makeStyles({\n  list: {\n    width: 450,\n    height: \"100%\",\n    backgroundColor: \"#F0F0F0\",\n    paddingTop: 10,\n  },\n});\n\nexport const MenuList = observer(() => {\n  const classes = useStyles();\n  const {\n    drawerState: { toggleDrawer },\n  } = useStore();\n  return (\n    <div\n      className={clsx(classes.list)}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <List>\n        {[\"Helplines\"].map((text, index) => (\n          <Link to=\"/helpline\">\n            <ListItem button key={text}>\n              <ListItemIcon>\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          </Link>\n        ))}\n      </List>\n      <Divider />\n      {/* <List>\n        {[\"Data Source\", \"About Us\", \"Join Us\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List> */}\n    </div>\n  );\n});\n","import React from \"react\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport { useStore } from \"../../../contexts\";\nimport { observer } from \"mobx-react\";\nimport { MenuList } from \"../components\";\n\nexport const SwipeableTemporaryDrawer = observer(() => {\n  const {\n    drawerState: { open, toggleDrawer }\n  } = useStore();\n  return (\n    <div>\n      <React.Fragment>\n        <SwipeableDrawer\n          anchor={\"left\"}\n          open={open}\n          onClose={toggleDrawer(false)}\n          onOpen={toggleDrawer(true)}\n        >\n          <MenuList></MenuList>\n        </SwipeableDrawer>\n      </React.Fragment>\n    </div>\n  );\n});\n","import React, {useState} from 'react'\nimport { useStore } from \"../../contexts\";\nimport { observer } from 'mobx-react'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { AppBar, Toolbar, IconButton, Typography, Select, MenuItem } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport './headerNav.css'\n\nexport const HeaderNav = observer(() => {\n  const {\n    drawerState: { toggleDrawer },\n    utilStore:{\n      setLanguage\n    }\n  } = useStore();\n  const [lang, handleChangelLang,] = useState('en')\n  const changeLang = (lang) => {\n    handleChangelLang(lang);\n    setLanguage(lang)\n  }\n\n  return (<div className='root'>\n    <AppBar position=\"static\">\n      <Toolbar classes={{\n        root: 'root'\n      }}>\n        <IconButton edge=\"start\" className='menuButton' color=\"black\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n          <MenuIcon />\n        </IconButton>\n        <div style={{ display: 'flex', justifyContent: 'space-between', flex: 1 }}>\n          <Typography variant=\"h5\">\n            <Link className=\"logo\" to=\"/\">\n              <span className=\"cause\">coronavirus</span>\n              <span className=\"appliation\">charts</span>\n              <span className=\"seperator\">.</span>\n              <span className=\"mode\">org</span>\n            </Link>\n          </Typography>\n          <div className=\"lang\">\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={lang}\n              onChange={e=>changeLang(e.target.value)}\n              disableUnderline\n              classes={{ icon:'langSelectIcon' }}\n            >\n              <MenuItem value=\"en\">English</MenuItem>\n              <MenuItem value=\"mar\">मराठी</MenuItem>\n            </Select>\n          </div>\n        </div>\n      </Toolbar>\n    </AppBar>\n  </div>)\n})","import memoizeOne from \"memoize-one\"\nimport _ from 'lodash';\n\nexport const getStatObject = memoizeOne((data) => {\n    // console.log(data)\n    return [\n        [{\n            name: \"confirmed\",\n            value: data?.confirmed ?? 0,\n            delta: data?.deltaconfirmed??0\n        },\n        {\n            name: \"recovered\",\n            value: data?.recovered ?? 0\n        },\n        {\n            name: \"active\",\n            value: data?.active ?? 0\n        },\n        {\n            name: \"died\",\n            value: data?.deaths ?? 0\n        }],\n        [{\n            name: \"confirmed\",\n            value: data?.confirmed ?? 0\n        },\n        {\n            name: \"hospitals\",\n            value: data?.totalHospitals ?? 0\n        },\n        {\n            name: \"beds\",\n            value: data?.totalBeds ?? 0\n        }]\n    ]\n}, (oldProps, newProps) => {\n    return (_.isEqual(oldProps[0], newProps[0]))\n})\n","import memoizeOne from \"memoize-one\";\nimport _ from 'lodash';\nimport { toJS } from 'mobx'\n\nexport const getProcessedStateStats = memoizeOne((stateWiseCount, bedCounts) => {\n    if (_.isEmpty(stateWiseCount) || _.isEmpty(bedCounts)) return []\n    const stateWiseData = []\n    const statesLength = stateWiseCount.length\n    for (let i = 0; i < statesLength; i++) {\n        let selectedStatState = stateWiseCount[i]?.name ?? undefined\n        if (selectedStatState) {\n            let bedData = bedCounts.find(state => {\n                if (selectedStatState === 'Total') {\n                    return state.state === 'INDIA'\n                } else {\n                    return state.state === selectedStatState\n                }\n            })\n            if (!_.isEmpty(bedData)) {\n                stateWiseData.push({\n                    ...toJS(stateWiseCount[i]),\n                    ...bedData\n                })\n            } else {\n                stateWiseData.push(toJS(stateWiseCount[i]))\n            }\n        }\n    }\n\n    // console.log(toJS(stateWiseData))\n    return stateWiseData\n})","import React from \"react\";\nimport { useStore } from \"../../../contexts\";\nimport { Map, CounterStrip } from \"../../common\";\nimport { geoMap, STRIPHEIGHT, MAPCONTAINERPADDING } from \"../../common/constants\";\nimport { min, max, scaleLinear } from \"d3\";\nimport { useEffect } from \"react\";\nimport { toJS } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport * as topojson from \"topojson-client\";\nimport memoizeOne from \"memoize-one\";\nimport { AutoSizer } from \"react-virtualized\";\nimport { getStatObject } from \"../../services\";\nimport { useTranslation } from 'react-i18next'\nimport \"./RegionMap.css\";\n\nconst getGeoJSON = memoizeOne(\n  (geoData, viewObject) => {\n    return geoData && viewObject && geoData.objects[viewObject.graphObjectName]\n      ? topojson.feature(\n          geoData,\n          toJS(geoData.objects[viewObject.graphObjectName])\n        )\n      : null;\n  },\n  (oldProp, newProp) =>\n    oldProp[1].name === newProp[1].name && oldProp[0] === newProp[0]\n);\n\nconst isCountryView = regionName => {\n  return regionName === \"country\";\n};\n\nconst getGeoColorScale = memoizeOne(data => {\n  if (data && data.length) {\n    const minProp = min(data, state => parseInt(state.confirmed, 10));\n    const maxProp = max(data, state => parseInt(state.confirmed, 10));\n    return scaleLinear()\n      .domain([minProp, maxProp])\n      .range([\"rgb(255,250,250)\", \"#FF0000\"]);\n  } else {\n    return null;\n  }\n});\n\nexport const RegionMap = observer(\n  ({ stateWiseCount, districtWiseCount, indiaCount }) => {\n    const {\n      mapState: {\n        view,\n        geoRegion,\n        district,\n        viewObject,\n        setStateView,\n        setDistrictView,\n        setCountryView,\n        regionData\n      },\n      coronaTracker: { geoData, getTopoDataForRegion }\n    } = useStore();\n\n    // Effect to fetch topoJSON data\n    useEffect(() => {\n      if (view) {\n        getTopoDataForRegion(viewObject);\n      }\n    }, [view, viewObject, getTopoDataForRegion]);\n    const { t } = useTranslation();\n    // Converting top JSON to GEO json\n    const corData = getGeoJSON(geoData, viewObject);\n    const colorScale = getGeoColorScale(\n      isCountryView(view) ? stateWiseCount : districtWiseCount[geoRegion]\n    );\n\n    return (\n      <>\n        <CounterStrip\n          regionName={t(\"India\")}\n          backNavigator={true}\n          data={getStatObject({\n            active: indiaCount?.active ?? 0,\n            recovered: indiaCount?.recovered ?? 0,\n            confirmed: indiaCount?.confirmed ?? 0,\n            deltaconfirmed: indiaCount?.deltaconfirmed ?? 0,\n            deaths: indiaCount?.deaths ?? 0,\n            totalHospitals: indiaCount?.totalHospitals ?? 0,\n            totalBeds: indiaCount?.totalBeds ?? 0,\n            region: \"India\"\n          })}\n          onClickHandler={setCountryView}\n        ></CounterStrip>\n        {regionData &&\n          regionData.map(item => {\n            return (\n              <CounterStrip\n                key={item ? item.displayName : district}\n                regionName={item ? item.displayName : district}\n                data={getStatObject({\n                  active: item?.active ?? 0,\n                  recovered: item?.recovered ?? 0,\n                  confirmed: item?.confirmed ?? 0,\n                  deltaconfirmed: item?.deltaconfirmed ?? 0,\n                  deaths: item?.deaths ?? 0,\n                  totalHospitals: item?.totalHospitals ?? 0,\n                  totalBeds: item?.totalBeds ?? 0,\n                  region: item ? item.displayName : district\n                })}\n              ></CounterStrip>\n            );\n          })}\n        <AutoSizer>\n          {({ height, width }) => {\n            const correctedHeight =\n              height - (STRIPHEIGHT + regionData.length * STRIPHEIGHT + MAPCONTAINERPADDING);\n            const correctedWidth = width - MAPCONTAINERPADDING;\n            return (\n              corData && (\n                <div\n                  className=\"rgn-map-container\"\n                  style={{ width: correctedWidth, height: correctedHeight }}\n                >\n                  <Map\n                    onRegionClick={\n                      isCountryView(view) ? setStateView : setDistrictView\n                    }\n                    colorScale={colorScale}\n                    className={\"r-map\"}\n                    keyToPickFromGeoData={geoMap[view].key}\n                    height={correctedHeight}\n                    width={correctedWidth}\n                    mapData={\n                      isCountryView(view)\n                        ? toJS(stateWiseCount)\n                        : toJS(districtWiseCount[geoRegion])\n                    }\n                    geoData={corData}\n                  ></Map>\n                </div>\n              )\n            );\n          }}\n        </AutoSizer>\n      </>\n    );\n  }\n);\n","import React from \"react\";\nimport { useStore } from \"../../../contexts\";\nimport { observer } from \"mobx-react\";\nimport { RegionMap } from \"../components/RegionMap\";\nimport { useEffect } from \"react\";\nimport { getProcessedStateStats } from \"../../services\";\nimport \"./Landing.css\";\n\nexport const Landing = observer(() => {\n  const {\n    coronaTracker: {\n      getStateWiseCount,\n      getDistrictWiseCount,\n      getBedCounts,\n      stateWiseCount,\n      bedCounts,\n      districtWiseCount\n    }\n  } = useStore();\n\n  useEffect(() => {\n    getStateWiseCount();\n    getDistrictWiseCount();\n    getBedCounts();\n  }, [getStateWiseCount, getDistrictWiseCount, getBedCounts]);\n\n  const stateWiseCountStat = getProcessedStateStats(stateWiseCount, bedCounts);\n  return (\n    <div className=\"landingContainer\">\n      <div>\n        <RegionMap\n          indiaCount={stateWiseCountStat ? stateWiseCountStat[0] : {}}\n          stateWiseCount={\n            stateWiseCountStat && stateWiseCountStat.slice(1, stateWiseCountStat.length)\n          }\n          districtWiseCount={districtWiseCount}\n        ></RegionMap>\n      </div>\n    </div>\n  );\n});\n","import React from 'react'\n\nexport const About = () => {\n    return (\n        <div>About</div>\n    )\n}","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./HelpCard.css\";\n\nexport const HelpCard = ({ data }) => {\n  return (\n    <Card className=\"help-container\" variant=\"outlined\">\n      <CardContent>\n        <div className=\"help-name\">\n          <span>{data.nameoftheorganisation}</span>\n        </div>\n        <div className=\"help-details\">\n          <div className=\"field details-type\">\n            <span>Type: </span>\n            <div className=\"help-value\">{data.category}</div>\n          </div>\n          <div className=\"field details-contact\">\n            <span>Contact: </span>\n            <div className=\"help-value\">{data.phonenumber}</div>\n          </div>\n          <div className=\"field details-desc\">\n            <span>Description: </span>\n            <div className=\"help-value\">{data.descriptionandorserviceprovided}</div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from '@material-ui/core/FormControl';\nimport \"./HelpSearch.css\";\n\nexport const HelpSearch = ({ filters }) => {\n  return (\n    <div className=\"help-search\">\n      {filters.map((filter) => {\n        return (\n          <FormControl key={filter.key} className=\"filter\">\n            <InputLabel id={`demo-simple-select-label-${filter.key}`}>\n              {`${filter.label}`}\n            </InputLabel>\n            <Select\n              labelId={`demo-simple-select-label-${filter.key}`}\n              id=\"demo-simple-select\"\n              value={filter.value}\n              onChange={filter.onSelect}\n            >\n              {filter.list.map((item) => {\n                return (\n                  <MenuItem key={`menu-${filter.key}-${item}`} value={item}>\n                    {item}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { useStore } from \"../../../contexts\";\nimport { HelpCard, HelpSearch } from \"../components\";\nimport \"./HelpContainer.css\";\n\nexport const HelpContainer = observer(() => {\n  const {\n    helpLine: { getHelpLineData, helpLineFilter, selectedData },\n  } = useStore();\n\n  React.useEffect(() => {\n    getHelpLineData();\n  }, [getHelpLineData]);\n\n  return (\n    <div className=\"help-line-container\">\n      <HelpSearch filters={helpLineFilter}></HelpSearch>\n      <div className=\"card-pane\">\n        {selectedData &&\n          selectedData.map((data) => {\n            return <HelpCard data={data}></HelpCard>;\n          })}\n      </div>\n    </div>\n  );\n});\n","import { observable, action, computed, toJS } from 'mobx'\nimport axios from 'axios';\nimport _ from 'lodash'\nimport { AppConfig } from '../modules'\n\nexport class HelpLine {\n    selectedData = null\n    @observable helpLineData = []\n    @observable helpLineFilter = [\n        { key: \"state\", label: \"State\", onSelect: this.selectState, list: [], disable: false, value: '' },\n        { key: \"city\", label: \"Area\", onSelect: this.selectArea, list: [], disable: true, value: '' }\n    ]\n\n    @action selectState = (e) => {\n        const selectedState = e.target.value\n        this.helpLineFilter = this.helpLineFilter.map(item => {\n            switch (item.key) {\n                case 'state':\n                    return {\n                        ...item,\n                        value: selectedState\n                    }\n                case 'city':\n                    return {\n                        ...item,\n                        value: '',\n                        list: _.keys(this.helpLineData[selectedState])\n                    }\n                case 'type':\n                    return {\n                        ...item,\n                        value: '',\n                        list: []\n                    }\n            }\n        })\n    }\n\n    @action selectArea = (e) => {\n        const selectedArea = e.target.value\n        const selectedState = this.helpLineFilter.find(item => item.key === 'state').value\n        this.selectedData = this.helpLineData[selectedState][selectedArea]\n        this.helpLineFilter = this.helpLineFilter.map(item => {\n            switch (item.key) {\n                case 'state':\n                    return item\n                case 'city':\n                    return {\n                        ...item,\n                        value: selectedArea\n                    }\n                case 'type':\n                    return {\n                        ...item,\n                        value: '',\n                        list: _.keys(this.helpLineData[selectedState][selectedArea])\n                    }\n            }\n        })\n    }\n\n    // @action selectType = (e) => {\n    //     const selectedType = e.target.value\n    //     const selectedState = this.helpLineFilter.find(item => item.key === 'state').value\n    //     const selectedArea = this.helpLineFilter.find(item => item.key === 'city').value\n    //     this.selectedData = this.helpLineData[selectedState][selectedArea][selectedType]\n    //     console.log(toJS(this.selectedData))\n    //     this.helpLineFilter = this.helpLineFilter.map(item => {\n    //         switch (item.key) {\n    //             case 'type':\n    //                 return {\n    //                     ...item,\n    //                     value: selectedType,\n    //                 }\n    //             default:\n    //                 return item\n    //         }\n    //     })\n    // }\n\n    @action getHelpLineData = async () => {\n        const { data } = await axios.get(`${AppConfig.apiBaseUrl}/resources/resources.json`)\n        this.helpLineData = data.resources.reduce((result, item) => {\n            let state = result[item.state] = result[item.state] || {};\n            let city = state[item.city] = state[item.city] || [];\n            // let category = city[item.category] = city[item.category] || [];\n            city.push(item);\n            return result;\n        }, {});\n\n        const states = Object.keys(this.helpLineData)\n        this.helpLineFilter = this.helpLineFilter.map(item => {\n            if (item.key === 'state') {\n                return {\n                    ...item,\n                    list: states\n                }\n            } else {\n                return item\n            }\n        })\n        // console.log(toJS(this.helpLineFilter))\n        // console.log(toJS(this.helpLineData))\n    }\n}","import axios from 'axios';\nimport { observable, action, toJS } from 'mobx'\nimport _ from 'lodash'\nimport { AppConfig } from '../modules'\n\nexport class CoronaTracker {\n    @observable stateWiseCount = null\n    @observable districtWiseCount = null\n    @observable bedCounts = null\n    @observable geoData = null\n\n    @action getStateWiseCount = async () => {\n        const { data } = await axios.get(`${AppConfig.apiBaseUrl}/data.json`)\n        this.stateWiseCount = data.statewise.map(state => ({\n            ...state,\n            name: state.state,\n            displayName: state.state\n        }))\n        // console.log(toJS(this.stateWiseCount))\n    }\n\n    @action getDistrictWiseCount = async () => {\n        const { data } = await axios.get(`${AppConfig.apiBaseUrl}/state_district_wise.json`)\n        const processedData = {}\n        for (let key in data) {\n            const sectionData = data[key] ? data[key].districtData : []\n            processedData[key] = []\n            for (let secKey in sectionData) {\n                processedData[key].push({\n                    name: secKey,\n                    displayName: secKey,\n                    ...sectionData[secKey]\n                })\n            }\n        }\n        this.districtWiseCount = processedData\n        // console.log(toJS(this.districtWiseCount))\n    }\n\n\n    @action getBedCounts = async () => {\n        const { data } = await axios.get(`${AppConfig.apiRootBaseUrl}/stats/hospitals`)\n        // console.log(data.data.regional)\n        this.bedCounts = data?.data?.regional ?? []\n    }\n\n    @action getTopoDataForRegion = async (viewObject) => {\n        const { data } = await axios.get(viewObject.geoDataFile)\n        this.geoData = data\n        // console.log(toJS(this.geoData))\n    }\n}","// src/stores/theme-store.tsx\nimport { observable, action } from 'mobx'\n\nexport class ThemeStore {\n  @observable\n  theme = 'light'\n\n  @action\n  setTheme(newTheme) {\n    this.theme = newTheme\n  }\n}","// src/stores/theme-store.tsx\nimport { observable, action } from 'mobx'\n\nexport class UtilsStore {\n    constructor (i18Ref) {\n        this.i18Ref = i18Ref\n    }\n  @observable language = 'en'\n  @observable i18Ref = null\n\n  @action setI18Context = (i18Ref) =>{\n    this.i18Ref = i18Ref\n  }\n  \n  @action\n  setLanguage = (newLanguage) => {\n    this.language = newLanguage\n    this.i18Ref.changeLanguage(newLanguage)\n  }\n}","import { observable, action } from 'mobx'\n\nexport class DrawerState {\n    @observable open = false\n\n    @action toggleDrawer = (open) => event => {\n        \n        if (\n            event &&\n            event.type === \"keydown\" &&\n            (event.key === \"Tab\" || event.key === \"Shift\")\n        ) {\n            return;\n        }\n        this.open = open\n    }\n}","\nimport i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport XHR from 'i18next-xhr-backend'\nimport translationHin from \"./locales/hin/translation.json\";\nimport translationEng from \"./locales/en/translation.json\";\nimport translationMar from \"./locales/mar/translation.json\";\n\ni18n\n  .use(XHR)\n  .use(LanguageDetector)\n  .init({\n    debug: true,\n    lng: \"en\",\n    fallbackLng: \"en\", // use en if detected lng is not available\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false // react already safes from xss\n    },\n\n    resources: {\n      en: {\n        translations: translationEng\n      },\n      hin: {\n        translations: translationHin\n      },\n      mar: {\n        translations: translationMar\n      }\n    },\n    // have a common namespace used around the full app\n    ns: [\"translations\"],\n    defaultNS: \"translations\"\n  });\n\nexport default i18n;","import React from \"react\";\nimport { MapState, ThemeStore, CoronaTracker, UtilsStore, DrawerState, HelpLine } from \"../stores\";\nimport i18n from '../i18n'\nimport { useLocalStore } from \"mobx-react\"; // 6.x or mobx-react-lite@1.4.0\nimport { I18nextProvider } from 'react-i18next'\n\nexport const storesContext = React.createContext(null);\n\nexport const StoreProvider = ({ children }) => {\n  const store = useLocalStore(() => ({\n    coronaTracker: new CoronaTracker(),\n    themeStore: new ThemeStore(),\n    mapState: new MapState(),\n    utilStore: new UtilsStore(i18n),\n    drawerState: new DrawerState(),\n    helpLine: new HelpLine()\n  }));\n  return (\n    <storesContext.Provider value={store}>\n      <I18nextProvider i18n={i18n}>\n        {children}\n      </I18nextProvider>\n    </storesContext.Provider>\n  );\n};\n\nexport const useStore = () => {\n  const store = React.useContext(storesContext);\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error(\"useStore must be used within a StoreProvider.\");\n  }\n  return store;\n};\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { StoreProvider } from './contexts';\nimport { Landing, HeaderNav, About, SwipeableTemporaryDrawer, HelpContainer } from './modules';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StoreProvider>\n        <Router>\n          <header><HeaderNav /></header>\n          <SwipeableTemporaryDrawer></SwipeableTemporaryDrawer>\n          <div className='main-pane'>\n            <Switch>\n              <Route path=\"/about\">\n                <About />\n              </Route>\n              <Route path=\"/helpline\">\n                <HelpContainer />\n              </Route>\n              <Route path=\"/\">\n                <Landing />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </StoreProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}